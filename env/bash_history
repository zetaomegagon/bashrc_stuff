ll userjs_backups/
cp userjs_backups/user.js.backup.2021-10-26_2229 ./user.js
./updater.sh 
./prefsCleaner.sh
sudo dnf upgrade -y
systemctl enable --now powertop
sudo bin/init-dimm-sensors 
udemy
sudo dnf install sbcl -y
sudo dnf search rlwrap
sudo dnf install rlwrap -y
which rlwrap
rlwrap $(command -p sbcl)
rlwrap command -p sbcl
sbcl
unset sbcl
command -vV sbcl
which sbcl
cd projects/udemy/common-lisp-programming/getting-started/
emacsctl restart
emacs hello.lisp 
cd udemy/common-lisp-programming/
touch hello.lisp
mkdir getting-started
mv hello.lisp getting-started/
cd getting-started/
emacs hello.lisp 
emacs ~/gits/bashrc_stuff/env/sbcl 
ln -s $HOME/gits/bashrc_stuff/env/sbcl $HOME/.sbcl
ll ~/
la ~/
emacs ~/.sbcl
emacs questions.txt
rm ~/.sbcl
mv ~/gits/bashrc_stuff/env/sbcl{,rc}
ln -s $HOME/gits/bashrc_stuff/env/sbclrc $HOME/.sbclrc
sbcl
printf '' > questions.txt 
emacs ~/.sbclrc
cat questions.txt 
emacs questions.txt 
sbcl --load hello.lisp 
sbcl --script hello.lisp 
discord
rm questions.txt 
flatpak saerch portacle
flatpak search portacle
sudo dnf search portacle
cd ~/downloads/
man tar
tar -xJv lin-portacle.tar.xz 
tar -xJvf lin-portacle.tar.xz 
mv portacle/ ../projects/udemy/common-lisp-programming/
cd ../projects/udemy/common-lisp-programming/
cd portacle/
./portacle.run 
ll all
ll all/emacsd/transient/
ll all/emacsd/elpa/
ll config/
cat config/help.txt 
less config/help.txt 
ll lin/emacs/
ll lin/sbin/
ll ../bin
ll ../lin/
ll lin/bin/
file lin/bin/xz
ll projects/
ll all/
ll all/ssl
ll all/emacsd/
ll all/emacsd/portacle/
file all/emacsd/smex-items 
less all/emacsd/smex-items 
emacs portacle.run 
ll lin/
ll lin/launcher/
file lin/launcher/portacle 
file lin/launcher/credentials 
./lin/launcher/portacle 
cd ..
rm -r portacle/
rm -fr portacle/
emacsctl restart
emacs
cd gits/bashrc_stuff/
git stash show
git stash list
sudo bin/init-dimm-sensors 
man pandoc
cd documents/
cd common-lisp/
evince practical-common-lisp.pdf 
cd ../../projects/pandoc/
cd --
cd documents/common-lisp/
rm practical-common-lisp.pdf 
watch -n1 'ls -Al'
cd --
cd documents/common-lisp/
rm practical-common-lisp.pdf 
watch -n1 'ls -Al'
sudo dnf install iotop iftop parallel
iftop
sudo iftop
dnf search nettop
dnf search top
dnf search top | less
dnf search top | less -R
dnf search top | grep -iE '.*top\.x86_64.*$
dnf search top | grep -iE '.*top\.x86_64.*$'
dnf search top | command -p grep -iE '.*top\.x86_64.*$'
dnf search top | command -p grep -iE '.*top\.x86_64.*$' | grep top
sudo dnf install {virt-,a,dns,f,h,numa,radeon,tip,tmux-,usb,}top -y
sudo dnf install $(printf "%s " {virt-,a,dns,f,h,numa,radeon,tip,tmux-,usb,}top) -y
printf "%s " {virt-,a,dns,f,h,numa,radeon,tip,tmux-,usb,}top
sudo dnf install {virt-,a,dns,f,h,numa,radeon,tip,tmux-,usb}top -y
radeontop
tiptop
ftop
numatop
sudo numatop
man numatop
sudo dnf remove numatop -y
find /usr/{bin,sbin} -iname *top
find /usr/bin -iname *top
sudo find /usr/bin -iname *top
sudo find / -iname '*top'
sudo find /usr/bin -iname '*top'
sudo find /usr/{s,}bin -iname '*top'
dnf search vnstat
dnf search iperf
sudo dnf install vnstat iperf3 -y
sudo vnstat
man vnstatd
systemctl list-units | grep -i vnstat
systemctl list-units
systemctl list-units --all
iperf3 -c iperf.scottlinux.com | command -p sender | awk '{ print $5 }'
iperf3 -c iperf.scottlinux.com | command -p grep sender | awk '{ print $5 }'
iperf3 -c iperf.scottlinux.com
iperf3 -c iperf.scottlinux.com | command -p grep sender | awk '{ print $7 $8 }'
iperf3 -c iperf.scottlinux.com | command -p grep sender | awk '{ print $7 }'
iperf3 -c iperf.scottlinux.com | command -p grep sender | awk '{ print $7 }' 2>/dev/null
sudo systemct enable --now vnstat
sudo systemctl enable --now vnstat
vnstat
watch -n1 "vnstat"
ll userjs_backups/
cp userjs_backups/user.js.backup.2021-10-26_2229 ./user.js
./prefsCleaner.sh
sudo dnf upgrade -y
systemctl enable --now powertop
sudo bin/init-dimm-sensors 
sudo dnf install sbcl -y
sudo dnf search rlwrap
sudo dnf install rlwrap -y
which rlwrap
rlwrap $(command -p sbcl)
rlwrap command -p sbcl
sbcl
unset sbcl
command -vV sbcl
which sbcl
cd projects/udemy/common-lisp-programming/getting-started/
emacsctl restart
emacs hello.lisp 
cd udemy/common-lisp-programming/
touch hello.lisp
mkdir getting-started
mv hello.lisp getting-started/
cd getting-started/
emacs hello.lisp 
emacs ~/gits/bashrc_stuff/env/sbcl 
ln -s $HOME/gits/bashrc_stuff/env/sbcl $HOME/.sbcl
emacs ~/.sbcl
emacs questions.txt
rm ~/.sbcl
mv ~/gits/bashrc_stuff/env/sbcl{,rc}
ln -s $HOME/gits/bashrc_stuff/env/sbclrc $HOME/.sbclrc
sbcl
printf '' > questions.txt 
emacs ~/.sbclrc
cat questions.txt 
emacs questions.txt 
sbcl --load hello.lisp 
sbcl --script hello.lisp 
discord
rm questions.txt 
flatpak saerch portacle
flatpak search portacle
sudo dnf search portacle
cd ~/downloads/
man tar
tar -xJv lin-portacle.tar.xz 
tar -xJvf lin-portacle.tar.xz 
mv portacle/ ../projects/udemy/common-lisp-programming/
cd ../projects/udemy/common-lisp-programming/
cd portacle/
./portacle.run 
ll all
ll all/emacsd/transient/
ll all/emacsd/elpa/
ll config/
cat config/help.txt 
less config/help.txt 
ll lin/emacs/
ll lin/sbin/
ll ../bin
ll ../lin/
ll lin/bin/
file lin/bin/xz
ll projects/
ll all/
ll all/ssl
ll all/emacsd/
ll all/emacsd/portacle/
file all/emacsd/smex-items 
less all/emacsd/smex-items 
emacs portacle.run 
ll lin/
ll lin/launcher/
file lin/launcher/portacle 
file lin/launcher/credentials 
./lin/launcher/portacle 
rm -r portacle/
rm -fr portacle/
emacsctl restart
emacs
cd gits/user.js/
rm user.js 
rm prefs.js
rm prefs.js.*
git pull
emacs ~/bin/git-sync
rm lock
rm {user,prefs}.js
rm userjs_backups/*
./updater.sh 
taiga
udemy
dnf search pandoc
sudo dnf install pandoc
cd projects/
mkdir pandoc
cd pandoc
which wget
wget -mk -np -e robots=off "https://gigamonkeys.com/book/"
cd gigamonkeys.com/
cd book
zip --help
unzip --help
unzip -p practicals-1.0.3.zip | less
grep . html
ll | grep html
echo * | grep html
for html in *; do if [[ $html ~= *html ]]; then echo $file; fi; done
for html in *; do if [[ $html =~ *html ]]; then echo $file; fi; done
for html in *; do if [[ $html =~ '*html' ]]; then echo $file; fi; done
for html in *; do if [[ $html =~ .*html ]]; then echo $file; fi; done
for file in *; do if [[ $file =~ .*html ]]; then echo $file; fi; done
for file in *; do if [[ $file =~ .*html ]]; then echo $file >> chapter-list.txt; fi; done
less chapter-list.txt 
curl "https://gigamonkeys.com/book/"
emacs chapter-list.txt 
cat chapter-list.txt | sort
sort --help
sort chapter-list.txt
sort chapter-list.txt > chapter-list-sorted
which htmldoc
cat chapter-list-sorted | while read -r TITLE; do for FILE in *; do if [[ ${TITLE#*\.} = $FILE ]]; then echo $FILE; fi; done; done
cat chapter-list-sorted | while read -r TITLE; do for FILE in *; do if [[ ${TITLE#*\.} = $FILE ]]; then mv $FILE $TITLE; fi; done; done
ls [0-9]{2}\.*
find . [0-9]{2}\.*
find [0-9]{2}\.*
find --regex [0-9]{2}\.*
dnf search htmldoc
dnf search pdflatex
dnf search tex
dnf search tex | less
sudo dnf install texlive
pandoc -f html -t pdf "https://gigamonkeys.com/book/"
ll | grep pdf
mv chapter-list-sorted{,.txt}
mv chapter-list{-sorted,}.txt 
pandoc -f html -t pdf "https://gigamonkeys.com/book/" -o pcl.pdf
echo $(for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then printf $FILE; fi; done)
echo $(for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then printf "%s " $FILE; fi; done)
pandoc -o pcl.pdf $(for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then printf "%s " $FILE; fi; done) --css style.css --toc
pandoc -o pcl.pdf -f html $(for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then printf "%s " $FILE; fi; done) --css style.css --toc
emacs 02.lather-rinse-repeat-a-tour-of-the-repl.html 
file -i 02.lather-rinse-repeat-a-tour-of-the-repl.html 
file -i *.html 
which iconv
iconv -l | grep -i utf-8
mkdir sources
file 02.lather-rinse-repeat-a-tour-of-the-repl.html 
file 02.lather-rinse-repeat-a-tour-of-the-repl.html | cut -d',' -f2
file 02.lather-rinse-repeat-a-tour-of-the-repl.html | cut -d',' -f2 | sed 's/\stext$//g;s/\s//g'
for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then iconv -f $(file -i $FILE | cut -d',' -f2 | sed 's/\stext$//g;s/\s//g') -t utf-8 $FILE -o ./sources/$FILE; fi; done
for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then iconv -f $(file -i $FILE | cut -d',' -f2 | sed 's/\stext$//g;s/\s//g') -t utf-8 $FILE -o $PWD/sources/$FILE; fi; done
for FILE in ../*; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then iconv -f $(file -i $FILE | cut -d',' -f2 | sed 's/\stext$//g;s/\s//g') -t utf-8 $FILE -o ./$FILE; fi; done
for FILE in ../*; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then iconv -f $(file -i $FILE | cut -d',' -f2 | sed 's/\stext$//g;s/\s//g') -t utf-8 $FILE -o $FILE; fi; done
set -x; for FILE in ../*; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then iconv -f $(file -i $FILE | cut -d',' -f2 | sed 's/\stext$//g;s/\s//g') -t utf-8 $FILE -o $FILE; fi; done; set +x
set -x; for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then iconv -f $(file -i $FILE | cut -d',' -f2 | sed 's/\stext$//g;s/\s//g') -t utf-8 $FILE -o ./sources/$FILE; fi; done; set +x
file *.html
file *.html | cut -d',' -f2
file *.html | cut -d',' -f2 | sed 's/^\s//g'
file *.html | cut -d',' -f2 | sed 's/^\s//g;s/\s.*$//g'
set -x; for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then iconv -f $(file -i $FILE | cut -d',' -f2 | sed 's/^\s//g;s/\s.*$//g') -t utf-8 $FILE -o ./sources/$FILE; fi; done; set +x
iconv --help
iconv --verbose --help
for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then iconv -f $(file -i $FILE | cut -d',' -f2 | sed 's/^\s//g;s/\s.*$//g') -t utf-8 $FILE -o ./sources/$FILE; fi; done
for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then iconv --verbose -f $(file -i $FILE | cut -d',' -f2 | sed 's/^\s//g;s/\s.*$//g') -t utf-8 $FILE -o ./sources/$FILE; fi; done
iconv --usage
iconv -l
iconv -l | less
set -x; for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then iconv --verbose -f $(file -i $FILE | cut -d',' -f2 | sed 's/^\s//g;s/\s.*$//g') -t utf-8 $FILE -o ./sources/$FILE; fi; done; set +x
file 01.introduction-why-lisp.html 
file 01.introduction-why-lisp.html | awk '{ print $3 }'
file 01.introduction-why-lisp.html | awk '{ print $4 }'
file *html | awk '{ print $4 }'
set -x; for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then iconv --verbose -f $(file -i $FILE | awk '{ print $4 }') -t utf-8 $FILE -o ./sources/$FILE; fi; done; set +x
for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then FROM_ENCODE="$(file -i $FILE | awk '{ print $4 }')"; iconv --verbose -f $FROM_ENCODE -t utf-8 $FILE -o ./sources/$FILE; fi; done
set -x; for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then FROM_ENCODE="$(file -i $FILE | awk '{ print $4 }')"; iconv --verbose -f $FROM_ENCODE -t utf-8 $FILE -o ./sources/$FILE; fi; done; set +x
set -x; for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then FROM_ENCODE="$(file -i $FILE | awk '{ print $4 }')"; iconv --verbose -f ISO-8859 -t utf-8 $FILE -o ./sources/$FILE; fi; done; set +x
set -x; for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then FROM_ENCODE="$(file -i $FILE | awk '{ print $4 }')"; iconv --verbose -f ISO-8859-1 -t UTF-8 $FILE -o ./sources/$FILE; fi; done; set +x
set -x; for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then FROM_ENCODE="$(file -i $FILE | awk '{ print $4 }')"; iconv --verbose -f ISO-8859-1 -t UTF-8//TRANSLIT $FILE -o ./sources/$FILE; fi; done; set +x
file sources/*html
ll sources/
mv sources/* .
file *html
set -x; for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then FROM_ENCODE="$(file -i $FILE | awk '{ print $4 }')"; iconv --verbose -f ASCII -t UTF-8//TRANSLIT $FILE -o ./sources/$FILE; fi; done; set +x
file --help
file sources/*
cd sources/
cp sources/* .
pandoc -f html $(for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then printf "%s " $FILE; fi; done) -o pcl.pdf
pandoc --css style.css -f html $(for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then printf "%s " $FILE; fi; done) -o pcl.pdf
ll figures/
nautilus ./figures
pandoc --css style.css -V geometry:margin=0.5in -f html $(for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then printf "%s " $FILE; fi; done) -o pcl.pdf
pandoc --css style.css -V geometry:"top=0.7in, bottom=0.7in, left=1in, right=1in" \ 
pandoc --css style.css -V geometry:"top=0.7in, bottom=0.7in, left=1in, right=1in" -f html $(for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then printf "%s " $FILE; fi; done) -o pcl.pdf
rm -r sources/
pandoc --css style.css -V geometry:"top=0.7in, bottom=0.7in, left=1in, right=1in" -f html index.html $(for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then printf "%s " $FILE; fi; done) -o pcl.pdf
ll | command -p grep -i html
echo *
for FILE in *; do if [[ $FILE =~ *html ]]; then printf "%s\n" $FILE; fi; done
for FILE in *; do if [[ $FILE =~ .*html ]]; then printf "%s\n" $FILE; fi; done
pandoc --css https://gigamonkeys.com/book/style.css -V geometry:"top=0.7in, bottom=0.7in, left=1in, right=1in" -f html index.html $(for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then printf "%s " $FILE; fi; done) blurbs.html letter-to-reader.html -o pcl.pdf
pandoc --css https://gigamonkeys.com/book/style.css -V geometry:"top=0.7in, bottom=0.7in, left=1in, right=1in" -f html index.html $(for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then printf "%s " $FILE; fi; done) -o pcl.pdf
emacs 32.conclusion-whats-next.html 
for FILE in *; do if [[ $FILE =~ [0-9]{1}\..*html ]]; then sed 's:\<title\>.*\<\\title\>::g'; fi; done
for FILE in *; do if [[ $FILE =~ [0-9]{2}\..*html ]]; then sed 's:\<title\>.*\<\\title\>::g'; fi; done
sed 's:\<title\>.*\<\\title\>::g' 31.practical-an-html-generation-library-the-compiler.html 
sed 's:\<title\>.*\<\\title\>::g' 31.practical-an-html-generation-library-the-compiler.html | less
sed 's:\<TITLE\>.*\<\\TITLE\>::g' 31.practical-an-html-generation-library-the-compiler.html | less
sed 's:\<TITLE\>.*\</TITLE\>::g' 31.practical-an-html-generation-library-the-compiler.html | less
sed 's:<TITLE>.*</TITLE>::g' 31.practical-an-html-generation-library-the-compiler.html | less
for FILE in *; do if [[ $FILE =~ [0-9]{2}\..*html ]]; then sed 's:<TITLE>.*</TITLE>::g'; fi; done
for FILE in *; do if [[ $FILE =~ [0-9]{2}\..*html ]]; then sed 's:<TITLE>.*</TITLE>::g' $FILE; fi; done
for FILE in *; do if [[ $FILE =~ [0-9]{2}\..*html ]]; then sed 's:<TITLE>.*</TITLE>::g' $FILE; fi; done | less
for FILE in *; do if [[ $FILE =~ [0-9]{2}\..*html ]]; then sed -i 's:<TITLE>.*</TITLE>::g' $FILE; fi; done
pandoc -V geometry:"top=0.7in, bottom=0.7in, left=1in, right=1in" -f html index.html $(for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then printf "%s " $FILE; fi; done) -o pcl.pdf
emacs style.css 
pandoc -V geometry:"top=1in, bottom=1in, left=1in, right=1in" -f html index.html $(for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then printf "%s " $FILE; fi; done) -o pcl.pdf
pcl-pdf() { pandoc -V geometry:"top=1in, bottom=1in, left=1in, right=1in" -f html index.html $(for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then printf "%s " $FILE; fi; done) -o pcl.pdf; }
emacs index.html 
man pandoc
pcl-pdf() { pandoc -s --toc -V geometry:"top=1in, bottom=1in, left=1in, right=1in" -f html $(for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then printf "%s " $FILE; fi; done) -o pcl.pdf; }
pwd
pcl-pdf() { pandoc --css file://${PWD}/style.css -s --toc -V geometry:"top=1in, bottom=1in, left=1in, right=1in" -f html $(for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then printf "%s " $FILE; fi; done) -o pcl.pdf; }
pcl-pdf() { pandoc --css file://${PWD}/style.css -s --toc -f html $(for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then printf "%s " $FILE; fi; done) -o pcl.pdf; }
evince pcl.pdf 
pcl-pdf() { pandoc --css file://${PWD}/style.css -s --toc -f html $(for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then printf "%s " $FILE; fi; done) -o practical-common-lisp.pdf; }
evince practical-common-lisp.pdf 
emacs 01.introduction-why-lisp.html 
rm practical-common-lisp.pdf 
rm pcl.pdf 
pcl-pdf() { pandoc --css file://${PWD}/style.css -s --toc -f html $(for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then printf "%s " $FILE; fi; done) -o ~/documents/lisp/practical-common-lisp.pdf; }
pcl-pdf() { pandoc --css file://${PWD}/style.css -s --toc -f html $(for FILE in *; do if [[ $FILE =~ [0-9]{1,2}\..*.html ]]; then printf "%s " $FILE; fi; done) -o ~/documents/common-lisp/practical-common-lisp.pdf; }
pcl-pdf
which pcl-pdf
which pcl-pdf | sed 's/pcl-pdf is a function//g' > pcl-pdf.sh
chmod +x pcl-pdf.sh 
emacs pcl-pdf.sh 
./pcl-pdf.sh
cd projects/pandoc/
mkdir google-common-lisp-style-guide
pandoc -o google-commonlisp-style-guide.pdf -f xml "https://google.github.io/styleguide/lispguide.xml"
pandoc -o google-commonlisp-style-guide.pdf -f html "https://google.github.io/styleguide/lispguide.xml"
pandoc -o google-commonlisp-style-guide.pdf --pdf-engine=xelatex -f html "https://google.github.io/styleguide/lispguide.xml"
evince google-commonlisp-style-guide.pdf 
rm google-commonlisp-style-guide.pdf 
cd google-common-lisp-style-guide/
pandoc --standalone --toc -o google-common-lisp-style-guide.pdf --pdf-engine=xelatex -f html "https://google.github.io/styleguide/lispguide.xml"
evince google-common-lisp-style-guide.pdf 
pandoc --standalone --toc -o ~/documents/common-lisp/google-common-lisp-style-guide.pdf --pdf-engine=xelatex -f html "https://google.github.io/styleguide/lispguide.xml"
wget -mk -np -e --robots=off "https://google.github.io/styleguide/lispguide.xml"
cd google.github.io/
styleguide/
cat lispguide.xml 
cat lispguide.xml  | less
dnf search xsltproc
dnf search xslt
which xsltproc
sxltproc lispguide.xml -o lispguide.html
xsltproc lispguide.xml -o lispguide.html
cd ..
rm -r google.github.io/
github
sudo dnf search rtorrent
sudo dnf install rtorrent
mkdir ~/torrents && cd ~/torrents
curl -Ls "https://raw.githubusercontent.com/wiki/rakshasa/rtorrent/CONFIG-Template.md"     | sed -ne "/^######/,/^### END/p"     | sed -re "s:/home/USERNAME:$HOME:" > $HOME/gits/bashrc_stuff/env/rtorrent.rc
cd gits/bashrc_stuff/env/
ln -s {$PWD,$HOME}/rtorrent.rc
ll ~/
rm ~/rtorrent.rc 
ln -s $PWD/rtorrent.rc $HOME/.rtorrent.rc
la ~/
emacs rtorrent.rc 
emacsctl stop
cd ../emacs/
ll straight/repos/
ll straight/build
ll straight/
ll auto
ll autosaves/
ll backups/
ll auto-save-list/
rm -r {auto-save-list,straight/*,snippets,url,tldr}
rm -fr {auto-save-list,straight/*,snippets,url,tldr}
rm -r straight/
emacsctl start
emacs init.el 
emacs init.el 
vnstat
iperf3 -c iperf.scottlinux.com | command -p grep sender | awk '{ print $7 }' 2>/dev/null
dnf search gawk
dnf search gimp
sudo dnf install -y gimp gawk
sudo dnf install aalib
aafire
sudo dnf remove aalib
which gimp
sudo dnf install -y gimp gawk
sudo dnf install aalib
aafire
sudo dnf remove aalib
which gimp
sudo bin/init-dimm-sensors 
cd documents/epaper/pdf
for pdf in *; do evince $pdf; done
evinced --help
/usr/libexec/evinced --help
for pdf in *; do ( evince $pdf &); done
pgrep evince
command -p pgrep evince
for pid in $(command -p pgrep evince); do printf "%s " $pid; done
for pid in $(command -p pgrep evince); do printf "%s " $pid; done; printf "\n"
for pid in $(command -p pgrep evince); do printf "%s\n" $pid; done
for pid in $(command -p pgrep evince); do printf pkill $pid; done
for pid in $(command -p pgrep evince); do pkill $pid; done
for pid in $(command -p pgrep evince); do kill -9 $pid; done
vmstat
vnstat --help
vnstat -l
vnstat --live --oneline
vnstat --oneline
vnstat --json
vnstat --json | jq '.'
vnstat --json | jq '.' | less
vnstat --json | jq '.' | less -R
vnstat --json | jq '.' | less --color=always
man less
vnstat --json | jq --color-output '.' | less
vnstat
man vnstat
which man
vnstat --json | jq --color-output '.' | less
vnstat
man foobar
emacs
which emacs
which man
man vnstat
emacsctl stop
pgrep tmux
pgrep tmux
set -x; man man; set +x
man man
set -x; man man; set +x
man man
man vnstat
hostnameclt
hostnamectl 
hostnamectl --help
hostnamectl set hostname panda
hostnamectl hostname panda
hostnamectl hostname
man vnstat
