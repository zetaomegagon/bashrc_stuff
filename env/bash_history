hostnamectl --help
hostnamectl set hostname panda
hostnamectl hostname panda
hostnamectl hostname
man vnstat
cd projects/docker-osx/
docker ps --all
sudo docker ps --all
sudo docker start -ai db45c66ca46f
for cid in "$(sudo docker ps -a | awk '{ print $1 })"; do [[ "$cid" != "CONTAINER ID" ]] && sudo docker rm $cid; done
for cid in $(sudo docker ps -a | awk '{ print $1 }'); do [[ "$cid" != "CONTAINER ID" ]] && sudo docker rm $cid; done
sudo docker ps -a
sudo ./run-monterey.sh 
qemu-kvm --help
less run-monterey.log 
emacs run-monterey.sh 
./run-monterey.sh 
cd projects/docker-osx/
docker ps --all
sudo docker ps --all
sudo docker start -ai db45c66ca46f
for cid in "$(sudo docker ps -a | awk '{ print $1 })"; do [[ "$cid" != "CONTAINER ID" ]] && sudo docker rm $cid; done
for cid in $(sudo docker ps -a | awk '{ print $1 }'); do [[ "$cid" != "CONTAINER ID" ]] && sudo docker rm $cid; done
sudo docker ps -a
sudo ./run-monterey.sh 
qemu-kvm --help
less run-monterey.log 
emacs run-monterey.sh 
./run-monterey.sh 
spectre -h
spectre -h | less
compass.spouse
compass.song
compass.school
tdbank
mkdir documents/compass
touch "e-form-number-W44254127" documents/compass/
ll documents/compass/
ll documents/
touch documents/compass/e-form-number-W44254127
rm e-form-number-W44254127 
dnf search keymapper
pip3
sudo dnf install python3-pip
which pip
which pip3
ll /usr/bin | grep pip
dnf info pip-3
sudo pip3 install --no-binary :all: git+https://github.com/sezanzeb/input-remapper.git
sudo pip install --no-binary :all: git+https://github.com/sezanzeb/input-remapper.git
cd gits/
git clone https://github.com/sezanzeb/input-remapper.git
cd input-remapper/
chmod +x setup.py 
sudo pip uninstall input-remapper
pip uninstall input-remapper
sudo pip uninstall --force input-remapper
pip uninstall --help
sudo find / -iname *input-remapper* 2>/dev/null
input-remapper-gtk
sudo python3 ./setup.py 
sudo python3 ./setup.py build
sudo python3 ./setup.py install
sudo python3 ./setup.py --help
sudo python3 ./setup.py --help-commands
cd ..
sudo find / -iname *input-remapper* -exec rm -rf {} \; 2>/dev/null
sudo find / -iname input-remapper-*
sudo find / -iname *input-remapper* -exec echo {}; rm -rf {} \; 2>/dev/null
sudo find / -iname *input-remapper* -exec echo {} \; rm -rf {} \; 2>/dev/null
sudo find / -iname *input-remapper* -exec rm -rf {} \;
sudo find / -iname *input-remapper*
cd ~/documents/compass/
nautilus .
google.personal
dnf search teams
dnf search microsoft
dnf search microsoft | grep teams
flatpak search microsoft
flatpak install com.microsoft.Teams
flatpak kill $(flatpak ps | command -p grep Teams | awk '{ print $1 }')
flatpak ps
flatpak uninstall com.microsoft.Teams
sudo dnf install ~/downloads/teams-1.4.00.26453-1.x86_64.rpm 
xbox.com
xbox
protonmail
xbox
protonmail
ip a
findmnt
flatpak ps | command -p grep videolan | awk '{ print $1 }'
flatpak kill $(flatpak ps | command -p grep videolan | awk '{ print $1 }')
flatpak ps
command -p pgrep vlc
pkill $(command -p pgrep vlc)
pgrep vlc
sudo kill -9 $(command -p pgrep vlc)
which mpv
sudo dnf install mpv
mpv "http://localhost:8080"
mpv "http://192.168.1.32:8080"
mpv "http://192.168.1.32:8080/stream"
mpv "http://192.168.1.32:8080/"
internet.archive 
hostnamectl hostname
man vnstat
cd projects/docker-osx/
docker ps --all
sudo docker ps --all
sudo docker start -ai db45c66ca46f
for cid in "$(sudo docker ps -a | awk '{ print $1 })"; do [[ "$cid" != "CONTAINER ID" ]] && sudo docker rm $cid; done
for cid in $(sudo docker ps -a | awk '{ print $1 }'); do [[ "$cid" != "CONTAINER ID" ]] && sudo docker rm $cid; done
sudo docker ps -a
sudo ./run-monterey.sh 
qemu-kvm --help
less run-monterey.log 
./run-monterey.sh 
spectre -h
spectre -h | less
compass.spouse
compass.song
compass.school
mkdir documents/compass
touch "e-form-number-W44254127" documents/compass/
ll documents/compass/
ll documents/
touch documents/compass/e-form-number-W44254127
rm e-form-number-W44254127 
dnf search keymapper
pip3
sudo dnf install python3-pip
which pip
which pip3
ll /usr/bin | grep pip
dnf info pip-3
sudo pip3 install --no-binary :all: git+https://github.com/sezanzeb/input-remapper.git
sudo pip install --no-binary :all: git+https://github.com/sezanzeb/input-remapper.git
cd gits/
git clone https://github.com/sezanzeb/input-remapper.git
cd input-remapper/
chmod +x setup.py 
sudo pip uninstall input-remapper
pip uninstall input-remapper
sudo pip uninstall --force input-remapper
pip uninstall --help
sudo find / -iname *input-remapper* 2>/dev/null
input-remapper-gtk
sudo python3 ./setup.py 
sudo python3 ./setup.py build
sudo python3 ./setup.py install
sudo python3 ./setup.py --help
sudo python3 ./setup.py --help-commands
cd ..
sudo find / -iname *input-remapper* -exec rm -rf {} \; 2>/dev/null
sudo find / -iname input-remapper-*
sudo find / -iname *input-remapper* -exec echo {}; rm -rf {} \; 2>/dev/null
sudo find / -iname *input-remapper* -exec echo {} \; rm -rf {} \; 2>/dev/null
sudo find / -iname *input-remapper* -exec rm -rf {} \;
sudo find / -iname *input-remapper*
cd ~/documents/compass/
nautilus .
google.personal
dnf search teams
dnf search microsoft
dnf search microsoft | grep teams
flatpak search microsoft
flatpak install com.microsoft.Teams
flatpak kill $(flatpak ps | command -p grep Teams | awk '{ print $1 }')
flatpak ps
flatpak uninstall com.microsoft.Teams
sudo dnf install ~/downloads/teams-1.4.00.26453-1.x86_64.rpm 
xbox.com
xbox
protonmail
tdbank
peco
cd ~/projects/docker-osx/
emacs run-monterey.sh 
protonmail
cd documents/cs-ce-programming/lisp/
echo Racket.Programming.the.Fun.Way.From.Strings.to.Turing.Machines.epub | tr "[A-Z]" "[a-z]" | sed 's/\..!\.epub/-/g'
echo Racket.Programming.the.Fun.Way.From.Strings.to.Turing.Machines.epub | tr "[A-Z]" "[a-z]" | sed 's/\./-/g'
echo Racket.Programming.the.Fun.Way.From.Strings.to.Turing.Machines.epub | tr "[A-Z]" "[a-z]" | sed 's/\.!\.epub/-/g'
echo Racket.Programming.the.Fun.Way.From.Strings.to.Turing.Machines.epub | tr "[A-Z]" "[a-z]" | sed 's/\./-/g;s/-epub/\.epub/g'
echo Racket.Programming.the.Fun.Way.From.Strings.to.Turing.Machines.epub | tr "[A-Z]" "[a-z]" | sed 's/\./-/g;s/-epub/\.epub/g;s/-from/_from/g'
mv Racket.Programming.the.Fun.Way.From.Strings.to.Turing.Machines.epub $(echo Racket.Programming.the.Fun.Way.From.Strings.to.Turing.Machines.epub | tr "[A-Z]" "[a-z]" | sed 's/\./-/g;s/-epub/\.epub/g;s/-from/_from/g')
pandoc -f epub -o racket-programming-the-fun-way_from-strings-to-turing-machines.pdf racket-programming-the-fun-way_from-strings-to-turing-machines.epub 
pandoc -f epub -o -t latex racket-programming-the-fun-way_from-strings-to-turing-machines.pdf racket-programming-the-fun-way_from-strings-to-turing-machines.epub 
pandoc -f epub -t latex -o racket-programming-the-fun-way_from-strings-to-turing-machines.pdf racket-programming-the-fun-way_from-strings-to-turing-machines.epub 
pandoc -f epub --pdf-engine=xelatex -o racket-programming-the-fun-way_from-strings-to-turing-machines.pdf racket-programming-the-fun-way_from-strings-to-turing-machines.epub 
pandoc -f epub --pdf-engine=xelatex -o racket-programming-the-fun-way_from-strings-to-turing-machines.pdf racket-programming-the-fun-way_from-strings-to-turing-machines.epub | less
sudo dnf install calibre
internet.archive
wget "https://raw.githubusercontent.com/sarabander/sicp-pdf/master/sicp.pdf"
mv sicp.pdf structure-and-interpretation-of-computer-programs-2e.pdf
sudo dnf install youtube-dl
cd ..
mkdir intro-to-the-theory-of-computation
youtube-dl "https://yewtu.be/playlist?list=PL601FC994BDD963E4"
youtube-dl "https://www.youtube.com/playlist?list=PL601FC994BDD963E4"
rm Lecture\ *
ll computational-complexity/
mv computational-complexity/ computational-theory
peco
cd ~/projects/docker-osx/
emacs run-monterey.sh 
docker ps --all
sudo ./run-monterey.sh 
sudo docker logs
docker ps
sudo docker image list
sudo docker ps
sudo docker ps --all
sudo docker rm $(sudo docker ps -a | tail -2 | awk '{ print $1 }')
sudo docker image rm $(sudo docker image list | tail -2 | awk '{ print $3 }')
echo $DISPLAY
sudo docker ps
sudo docker ps --all
sudo docker rm $(sudo docker ps -a | tail -2 | awk '{ print $1 }')
sudo docker image rm $(sudo docker image list | tail -2 | awk '{ print $3 }')
echo $DISPLAY
tail -f projects/docker-osx/run-monterey.log 
cd projects/
cd docker-osx/
sed -ir '/[0-9]+\%/d;s/\\x1b\[0;1;31m//g;s/\\x1b\[2J^M//g;s/\^M//g' run-monterey.log
sed -r '/[0-9]+\%/d;s/\\x1b\[0;1;31m//g;s/\\x1b\[2J^M//g;s/\^M//g' run-monterey.log
sed -r '/[0-9]+\%/d;s/\\x1b\[0;1;31m//g;s/\\x1b\[2J^M//g;s/\^M//g' run-monterey.log | less
man sed
sed -i -r '/[0-9]+\%/d;s/\\x1b\[0;1;31m//g;s/\\x1b\[2J^M//g;s/\^M//g' run-monterey.log
less run-monterey.
less run-monterey.log
emacs
sed -ri '/[0-9]+\%/d;s/\\x1b\[0;1;31m//g;s/\\x1b\[2J^M//g;s/\^M//g' run-monterey.log
rm run-monterey.logr
emacs run-monterey.sh 
less run-monterey.log 
systemctl status kvm
systemctl list-units | grep kvm
sudo dnf search kvm
sudo dnf install libvirt-daemon-kvm qemu-kvm -y
systemctl status libvirt-kvm
systemctl status libvirt-daemon-kvm
lsmod | grep kvm
cd projects/docker-osx/
less run-monterey.log 
sudo docker log
sudo docker logs
sudo docker ps
echo $DISPLAY
sudo dnf -y install bridge-utils libvirt virt-install qemu-kvm
lsmod | grep kvm
sudo dnf -y install libvirt-devel virt-top libguestfs-tools
sudo systemctl enable --now libvirtd
systemctl status libvirtd
sudo docker -ps -a
sudo docker ps -a
sudo docker rm $(sudo docker ps -a | awk '{ print $1 }' | while read CID; do if [[ "$CID" =~ CONTAINER.*ID ]]; then printf "$CID"; fi; done)
sudo docker ps -a | awk '{ print $1 }' | while read CID; do if [[ "$CID" =~ CONTAINER.*ID ]]; then printf "$CID"; fi; done
sudo docker ps -a | awk '{ print $1 }' | while read CID; do if [[ "$CID" =~ CONTAINER ]]; then printf "$CID"; fi; done
sudo docker ps -a | awk '{ print $1 }' | while read CID; do echo $CID; done
sudo docker ps -a | awk '{ print $1 }' | while read -r CID; do if [[ "$CID" =~ CONTAINER|ID ]] then; echo $CID; fi; done
sudo docker ps -a | awk '{ print $1 }' | while read -r CID; do if [[ "$CID" =~ CONTAINER|ID ]]; then echo $CID; fi; done
sudo docker ps -a | awk '{ print $1 }' | while read -r CID; do if ! [[ "$CID" =~ CONTAINER|ID ]]; then echo $CID; fi; done
sudo docker rm $(sudo docker ps -a | awk '{ print $1 }' | while read -r CID; do if ! [[ "$CID" =~ CONTAINER|ID ]]; then echo $CID; fi; done)
sudo docker logs
sudo docker ps
echo $DISPLAY
sudo dnf -y install bridge-utils libvirt virt-install qemu-kvm
sudo dnf -y install libvirt-devel virt-top libguestfs-tools
sudo systemctl enable --now libvirtd
sudo docker -ps -a
sudo docker rm $(sudo docker ps -a | awk '{ print $1 }' | while read CID; do if [[ "$CID" =~ CONTAINER.*ID ]]; then printf "$CID"; fi; done)
sudo docker ps -a | awk '{ print $1 }' | while read CID; do if [[ "$CID" =~ CONTAINER.*ID ]]; then printf "$CID"; fi; done
sudo docker ps -a | awk '{ print $1 }' | while read CID; do if [[ "$CID" =~ CONTAINER ]]; then printf "$CID"; fi; done
sudo docker ps -a | awk '{ print $1 }' | while read CID; do echo $CID; done
sudo docker ps -a | awk '{ print $1 }' | while read -r CID; do if [[ "$CID" =~ CONTAINER|ID ]] then; echo $CID; fi; done
sudo docker ps -a | awk '{ print $1 }' | while read -r CID; do if [[ "$CID" =~ CONTAINER|ID ]]; then echo $CID; fi; done
sudo docker ps -a | awk '{ print $1 }' | while read -r CID; do if ! [[ "$CID" =~ CONTAINER|ID ]]; then echo $CID; fi; done
sudo docker rm $(sudo docker ps -a | awk '{ print $1 }' | while read -r CID; do if ! [[ "$CID" =~ CONTAINER|ID ]]; then echo $CID; fi; done)
cd projects/docker-osx/
sudo ./run-monterey.sh 
emacs run-monterey.sh
less run-monterey.log 
cat /sys/module/kvm/parameters/ignore_msrs 
lsmod kvm
lsmod | grep kvm
sysctl --help
sudo sysctl -a | grep ignore
sudo sysctl -a | grep msrs
sudo sysctl -a | grep kvm
journaclt -x
journalclt -x
journalctl
journalctl -x
journalctl -xe
journalctl | grep docker
sudo docker start 095e398c2f00
sudo docker ps -a
sudo docker logs 095e398c2f00
sudo docker logs 095e398c2f00 | grep kvm
systemctl status libvirtd
pgrep -ia node
pgrep
pgrep firefix
pgrep firefox
command -p pgrep -is fireofx
command -p pgrep -is firefox
command -p pgrep -ia firefox
pa aux tmux
ps aux tmux
ps -aux tmux
ps
ps --help
man ps
ps aux | grep node
ss 
ss | grep node
ss | grep tmux
ss | grep firefox
lsof
sudo lsof
sudo lsof | grep firefox
ss
man ss
ss -pl | less
ss -t -r state established | less
which node
sudo dnf install npm
npm install -g npm@8.3.0
sudo npm install -g npm@8.3.0
npm audit fix
sudo npm audit fix
npm install -g http-server
sudo npm install -g http-server
(http-server &)
(http-server >/dev/null &)
ss -l -r state established | less
ss -l | less
ps aux | grep http
for pid in 58684 59098; do pkill $pid; done
pkill {58684,59098}
for pid in 58684 59098; do kill -9 $pid; done
ps aux | grep [h]ttp
http-server --help
http-server --help | less
sudo dnf search yarn
sudo dnf install yarnpkg
which yarn
yarn run --help
man yarn
yarn --help | grep port
yarn --help | less
yarn --help run
yarn --help
yarn help run
http-server
yarn config list
yarn help dev
yarn help | grep dev
sudo docker ps -a | awk '{ print $1 }' | while read -r CID; do if [[ "$CID" =~ CONTAINER|ID ]]; then echo $CID; fi; done
sudo docker ps -a | awk '{ print $1 }' | while read -r CID; do if ! [[ "$CID" =~ CONTAINER|ID ]]; then echo $CID; fi; done
sudo docker rm $(sudo docker ps -a | awk '{ print $1 }' | while read -r CID; do if ! [[ "$CID" =~ CONTAINER|ID ]]; then echo $CID; fi; done)
command -p pgrep -a http-server
/usr/bin/pgrep -a http-server
pgrep() { /usr/bin/pgrep $@; }
pgrep() { /usr/bin/pgrep -ia $@; }
pgrep http-server
sudo docker ps -a | awk '{ print $1 }' | while read -r CID; do if ! [[ "$CID" =~ CONTAINER|ID ]]; then echo $CID; fi; done
sudo docker rm $(sudo docker ps -a | awk '{ print $1 }' | while read -r CID; do if ! [[ "$CID" =~ CONTAINER|ID ]]; then echo $CID; fi; done)
echo $DISPLAY 
ss -l | grep 8080
ss -tl | grep 8080
ss -tl
ss -l
man ss
ss -a
ss -a | less
ss -lr | less
which netstat
netstat -ltup | 8080
netstat -ltup | grep 8080
netstat -ltup
sudo netstat -ltup
sudo netstat -lntup | grep http-server
sudo netstat -lntup
dnf search netstat
dnf info netstat-monitor
sudo systemctl enable --now libvirtd
systemctl status libvirtd
sudo docker -ps -a
sudo docker ps -a
sudo docker rm $(sudo docker ps -a | awk '{ print $1 }' | while read CID; do if [[ "$CID" =~ CONTAINER.*ID ]]; then printf "$CID"; fi; done)
sudo docker ps -a | awk '{ print $1 }' | while read CID; do if [[ "$CID" =~ CONTAINER.*ID ]]; then printf "$CID"; fi; done
sudo docker ps -a | awk '{ print $1 }' | while read CID; do if [[ "$CID" =~ CONTAINER ]]; then printf "$CID"; fi; done
sudo docker ps -a | awk '{ print $1 }' | while read CID; do echo $CID; done
sudo docker ps -a | awk '{ print $1 }' | while read -r CID; do if [[ "$CID" =~ CONTAINER|ID ]] then; echo $CID; fi; done
sudo docker ps -a | awk '{ print $1 }' | while read -r CID; do if [[ "$CID" =~ CONTAINER|ID ]]; then echo $CID; fi; done
sudo docker ps -a | awk '{ print $1 }' | while read -r CID; do if ! [[ "$CID" =~ CONTAINER|ID ]]; then echo $CID; fi; done
sudo docker rm $(sudo docker ps -a | awk '{ print $1 }' | while read -r CID; do if ! [[ "$CID" =~ CONTAINER|ID ]]; then echo $CID; fi; done)
cd projects/
mkdir yarn-vue
cd yarn-vue/
yarn global add @vue/cli @vue/cli-service-global
sudo yarn global add @vue/cli @vue/cli-service-global
vue help serve
vue serve help
vue help
vue serve --help
cat "<template>
</template>
" > App.vue
echo "<template>
</template>
" > App.vue
cat App.vue 
emacs App.vue 
vue serve
echo '{\n"name": "Elijah Beale"\n"version": "0.0.alpha"\n}' >> package.json
cat package.json 
yarn run App.vue 
npm init
mv App.vue index.js
yarn run index.js 
yarn run
mv index.js App.vue
rm -rf package.json yarn-error.log node_modules/
vue serve App.vue 
vue serve App.vue --host :: --port 3000
vue serve App.vue --port 3000
rm -r *
vue create example-app
cd example-app/
vue-cli-service serve --mode
vue create foobar
rm -rf *
mv ../{yarn-vue,vue-scratch}
mv vue-scratch/
mv build{_shit,-shit}
mv google{_takeout,-takeout}
cd vue-scratch/
vue create hello-world
cd hello-world/
ll node_modules/
ll 
ll public/
ll src/
emacs src/App.vue 
less package.json 
emacs package.json 
cd ..
get-running-node() { netstat -tnlup 2>/dev/null | command -p grep 'node' | sed 's:/node::'; }
get-running-node() { netstat -tnlup 2>/dev/null | command -p grep 'node' | awk '{ prin $7 }' | sed 's:/node::'; }
get-running-node 
get-running-node() { netstat -tnlup 2>/dev/null | command -p grep 'node' | awk '{ print $7 }' | sed 's:/node::'; }
get-running-node
printf "\n%s\n" 'get-running-node() { netstat -tnlup 2>/dev/null | command -p grep 'node' | awk '{ print $7 }' | sed 's:/node::'; }'
printf "\n%s\n" 'get-running-node() { netstat -tnlup 2>/dev/null | command -p grep \'node\' | awk \'{ print $7 }\' | sed \'s:/node::\'; }'
printf "\n%s\n" get-running-node() { netstat -tnlup 2>/dev/null | command -p grep 'node' | awk '{ print $7 }' | sed 's:/node::'; }
printf "\n%s\n" "get-running-node() { netstat -tnlup 2>/dev/null | command -p grep 'node' | awk '{ print $7 }' | sed 's:/node::'; }"
printf "\n%s\n" "get-running-node() { netstat -tnlup 2>/dev/null | command -p grep 'node' | awk '{ print \$7 }' | sed 's:/node::'; }"
printf "\n%s\n" "get-running-node() { netstat -tnlup 2>/dev/null | command -p grep 'node' | awk '{ print \$7 }' | sed 's:/node::'; }" >> ~/.functions 
sudo docker ps -a | awk '{ print $1 }' | while read -r CID; do if [[ "$CID" =~ CONTAINER|ID ]] then; echo $CID; fi; done
sudo docker ps -a | awk '{ print $1 }' | while read -r CID; do if [[ "$CID" =~ CONTAINER|ID ]]; then echo $CID; fi; done
sudo docker ps -a | awk '{ print $1 }' | while read -r CID; do if ! [[ "$CID" =~ CONTAINER|ID ]]; then echo $CID; fi; done
sudo docker rm $(sudo docker ps -a | awk '{ print $1 }' | while read -r CID; do if ! [[ "$CID" =~ CONTAINER|ID ]]; then echo $CID; fi; done)
curl "https://cli.vuejs.org/guide/prototyping.html" | grep -E '<template>.*</template>'
curl "https://cli.vuejs.org/guide/prototyping.html"
curl "https://cli.vuejs.org/guide/prototyping.html" | grep template
yarn help
yarn help config
yarn dev --port <your_port> || yarn dev -- --port <your_port>
cd projects/vue-scratch/hello-world/
yarn dev --port 3030
touch .{env,env.alt,env.alt.local}
mv env.{alt,production}
mv .env.{alt,production}
mv .env.{alt.local,production.local}
touch .env.local
la | grep env
yarn lint
yarn dev
(yarn dev >/dev/null &)
netstat -tnlup
cd cd
cd projects/vue-scratch/
find ./node_modules/ -iname vue-cli-service
vue-cli-service() { local project_dir=$PWD; local vcs_dir=${project_dir}/node_modules/.bin/vue-cli-service
vue-cli-service() { local project_dir=$PWD; local vcs_dir=${project_dir}/node_modules/.bin}; ${vcs_dir}/vue-cli-service $@; }
vue-cli-service() { local project_dir=$PWD; local vcs_dir=${project_dir}/node_modules/.bin; ${vcs_dir}/vue-cli-service $@; }
vue-cli-service serve --port 55000
cd ..
vue-cli-service 
cd hello-world/
yarn dev --port 55000 --open
yarn dev --port 5500 --open
yarn dev --open
list-listening() { netstat -tnlup; }
list-listening
list-listening | grep node | awk '{ print $7 }'
list-listening | grep node | awk '{ print $7 }' | sed 's/\/node//g'
list-listening | grep node | awk '{ print $7 }' | sed ''/\(/d;s/\/node//g'
list-listening | grep node | awk '{ print $7 }' | sed '/\(/d;s/\/node//g'
list-listening | grep node | awk '{ print $7 }' | sed -r '/\(/d;s/\/node//g'
list-listening | grep node | awk '{ print $7 }' | sed -r '/\(/d'
list-listening | grep node | awk '{ print $7 }' | sed -r '/Not/d'
list-listening | grep node | awk '{ print $7 }' | sed -r 's/Not//g'
list-listening 2>/dev/null 
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed -r 's/Not//g'
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed -r 's:/node;;g'
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed -r 's:\/node;;g'
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed -r 's:\/node::g'
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed 's,node,,g'
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed 's,\/node,,g'
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed 's,\\/node,,g'
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed 's,[/]node,,g'
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed 's,[\/]node,,g'
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed 's,"/node",,g'
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed -r 's,\/node,,g'
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed -r 's,\/node,,'
list-listening 2>/dev/null | command -p grep node | awk '{ print $7 }' | sed -r 's,/node,,'
preview -f
list-listening | grep node | awk '{ print $7 }'
list-listening | grep node | awk '{ print $7 }' | sed 's/\/node//g'
list-listening | grep node | awk '{ print $7 }' | sed ''/\(/d;s/\/node//g'
list-listening | grep node | awk '{ print $7 }' | sed '/\(/d;s/\/node//g'
list-listening | grep node | awk '{ print $7 }' | sed -r '/\(/d;s/\/node//g'
list-listening | grep node | awk '{ print $7 }' | sed -r '/\(/d'
list-listening | grep node | awk '{ print $7 }' | sed -r '/Not/d'
list-listening | grep node | awk '{ print $7 }' | sed -r 's/Not//g'
list-listening 2>/dev/null 
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed -r 's/Not//g'
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed -r 's:/node;;g'
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed -r 's:\/node;;g'
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed -r 's:\/node::g'
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed 's,node,,g'
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed 's,\/node,,g'
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed 's,\\/node,,g'
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed 's,[/]node,,g'
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed 's,[\/]node,,g'
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed 's,"/node",,g'
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed -r 's,\/node,,g'
list-listening 2>/dev/null | grep node | awk '{ print $7 }' | sed -r 's,\/node,,'
list-listening 2>/dev/null | command -p grep node | awk '{ print $7 }' | sed -r 's,/node,,'
cd projects/vue-scratch/
yarn create hello-hello-world
vue create example project
vue create example-project
cd example-project/
yarn serve
(yarn serve >/dev/null 2>&1 &)
for pid in $(get-running-node); do kill -9 $pid; done
cd ..
(cd example-project/ && yarn serve --port 4040 >/dev/null 2&1 &)
(cd example-project/ && yarn serve --port 4040 >/dev/null 2>&1 &)
(cd hello-world/ && yarn serve >/dev/null 2>&1 &)
get-running-node 3030
netstat -tnlup
get-running-node 8080
search heredoc in emacs
get-running-node help
get-running-node --help
get-running-node foo
while read -r pid; do pkill $pid; done < <(get-running-node)
while read -r pid; do kill -9 $pid; done < <(get-running-node)
get-running-node
(cd hello-world/ && yarn dev >/dev/null 2>&1)
(cd hello-world/ && yarn dev >/dev/null 2>&1 &)
(cd example-project/ && yarn dev --port 4040 >/dev/null 2>&1 &)
get-running-node 
get-running-node src -f
get-running-node 4040
