#!/bin/bash

## Start tmux on every shell login
tmux-start() {
    if which tmux >/dev/null 2>&1; then
        if [[ -z "$TMUX" ]]; then
            ID="$(tmux ls | grep -vm1 attached | cut -d: -f1)"
	    if [[ -z "$ID" ]]; then 
                tmux new-session
            else
                tmux attach-session -t "$ID"
            fi
        fi
    fi
}

## Start sleep sounds
sleep-sounds() {
    local mpv="/usr/bin/mpv"
    local music_dir="$HOME/Music"
    local track="rain.mp3"
    local track_url="https://www.youtube.com/watch?v=xoirXUhEpIo"

    start-track() {
	("$mpv" --no-video "$1" >/dev/null 2>&1 & touch /tmp/rain.$!)
    }

    [[ ! -e "$mpv" ]] && sudo dnf -qy install mpv

    if [[ -f "${music_dir}/$track" ]]; then
	start-track "${music_dir}/$track"
    else
	start-track "$track_url"
    fi
}

## Kill sleep sounds
kill-sleep-sound() {
    for file in $(echo /tmp/rain.*); do
	local pid=${file#/tmp/rain\.}
	kill $pid 2>/dev/null
	rm /tmp/rain.$pid
    done
}


git-sync() {
    # Add, commit, push functions and aliases.
    # Hopefully safely
    
    local repo="${HOME}/gits/bashrc_stuff"

    # move to working dir 
    [[ "$(pwd)" != "$repo" ]] && pushd "$repo" >/dev/null 2>&1

    # ensure stash is clean
    [[ -n "$(git stash list)" ]] && git stash drop

    # stash changes (if any) & sync with github repo
    git stash >/dev/null 2>&1
    git pull

    # apply stash (if any)
    [[ -n "$(git stash list)" ]] && git stash apply

    # Add all, commit, push
    git add -A
    git commit -m "auto commited on: $(date -u '+%F %T') [UTC]"
    git push origin master

    # Good push? Drop the stash
    [[ "$?" -eq 0 ]] && git stash drop

    # Return to origin dir
    popd >/dev/null 2>&1

    # Source updated .bashrc
    unalias -a && . ${HOME}/.bashrc
}

mpw() {
    # Modified mpw wrapper
    _copy() {
        _clips=('pbcopy' 'xclip' 'gpaste-client')
        _use="${_clips[2]}"

        case "$_use" in
            "${_clips[0]}")
                hash "$_use" 2>/dev/null && "$_use" ;;
            "${_clips[1]}")
                hash "$_use" 2>/dev/null && "$_use" ;;
            "${_clips[2]}")
                hash "$_use" 2>/dev/null && "$_use" add-password "" ;;
            *)
                cat; echo 2>/dev/null
                return
        esac

        echo >&2 "Copied!"
    }

    if [[ "$1" =~ '(-h|--help)' ]]; then
	# Call the binary directly when passing help flag so we
	# don't get ugly output and double output with pager
	
	if [[ ! -f /tmp/mpw_help ]]; then
	    ${HOME}/bin/mpw -h > /tmp/mpw_help 2>&1
	fi
	
	less /tmp/mpw_help
    else
 	# Empty the clipboard
	:| _copy 2>/dev/null

	# Ask for the user's name and password if not yet known.
	MPW_FULLNAME=${MPW_FULLNAME:-$(ask 'Your Full Name:')}

	# Start Master Password and copy the output.
	printf %s "$(MPW_FULLNAME=$MPW_FULLNAME command mpw "$@")" | _copy

	# For gpaste-client: clear last password after 30 seconds
	if [[ "$_use" = "${_clips[2]}" ]]; then
            ({ _name="$(mktemp -u XXXXXXXXXXXX)";
               gpaste-client rename-password "" "$_name";
               sleep 30;
               gpaste-client delete-password "$_name"; } >/dev/null 2>&1 &)
	fi
    fi
}

kill-chromium() {
    # kill instances of chromium|iridium based on profile:
    # - personale
    # - work
    # - etc
    
    local pids=$(pgrep -a '(chromium|iridium)'-browser \
		     | grep $1 \
		     | awk '{ print $1 }')

    for pid in $pids; do
	kill -HUP "$pid" &
    done
}

gpaste() {
    # syntactic sugar for Gpaste Client
    printf "%s\n" "$(/usr/bin/gpaste-client "$@")"
}

clipc() {
    # Clear gpaste-client history
    gpaste empty
}

notify() {
    # Audible notification. Useful for end of
    # execution of process
    
    previous_volume=$(amixer get Master \
			  | tail -1 \
			  | awk '{ print $4 }' \
			  | sed s'/[\[\]]//')

    amixer set Master 100% >/dev/null 2>&1

    sleep .5; espeak "Task complete."; sleep .5

    amixer set Master "$previous_volume" >/dev/null 2>&1
}

timer() {
    # A crappy timer...I don't even know what I'm
    # trying to do here
    
    if [[ "$1" =~ [0-9]+ ]]; then
	(sleep "$1" &)
	wait $!
	for ((c=0;c<60;c++)); do
	    ({ notify; sleep 1; } &)
	done
    else
	printf "Usage: timer <number_with_units>\\n"
    fi
}

dirspike() {
    # Set clean state
    currentDir="$(pwd)"
    cd
    
    # Clean the screen
    clear
    sleep .5
    
    # Top half
    printf "~\\n"
    
    for dir in $(echo "*"); do
	pushd "${HOME}/$dir"
    done

    # bottom half
    for dir in $(popd 2>/dev/null); do
	popd 2>/dev/null
    done

    # Back in time!
    cd "$currentDir"
}

debug() {
    # crappy debug function

    set -x; "$@"; set +x
}

mpv() {
    # call mpv on a file and keep the display from sleeping
    local optimus="$(lspci | grep -E 'VGA|3D' | grep -E '[nN]vidia|NVIDIA')"
    
    play() {
	# if nvidia optimus graphics card exists, use it
	inhibit-lid-switch() {
	     # syntactic sugar
	     systemd-inhibit --what=handle-lid-switch /usr/bin/mpv "$@"
	 }
	 
	if [[ -z "$optimus" ]]; then
	    inhibit-lid-switch "$@"
	else
	    DRI_PRIME=1 inhibit-lid-switch "$@"
	fi
    }
   
    play "$@" 
}

is-up() {
    # see if a server port is open
    
    local address="$1"
    local port="$2"
    local aregex="[0-9]{1,3}"
    local pregex="[0-9]{1,10000}"

    usage()
    {
	printf "Usage:\\n"
	printf "  is-up <address> <port>"
	printf "\\n"
    }

    if [[ "$address" =~ ${aregex}\.${aregex}\.${aregex}\.${aregex} ]] && \
	   [[ "$port" =~ $pgregex ]]; then

	watch -n1 "nc -z $address $port; echo $?"

    else
	usage
    fi
}

emacs() {
    # start emacs client
    /usr/bin/emacsclient -nw "$@";
}

emacsctl() {
    # syntactic sugar for controlling emacs daemon.
    usage() {
	printf "%s\n" "Usage: emacsctl {status|start|stop|restart|reload}"
    }
    
    case "$1" in
		 status|stop|start|restart)
		     systemctl --user "$1" emacs ;;
		 reload)
		     emacsctl restart ;;
		 *)
		     usage
    esac
}

ayudame() {
    # redirect long program help into a file and
    # read with a pager.
    local progname="$(which "$@")"
    local exitstat="$($progname --help >/dev/null 2>&1; echo $?)"
    local helpfile="/tmp/$(basename $progname)_help"
    local pagers=( "$(which most)" "$(which less)" "$(which more)")
    local pager
    
    if hash "${pagers[0]}"; then
	pager="${pagers[0]}"
    elif hash "${pagers[1]}"; then
	pager="${pagers[1]}"
    else
	pager="${pagers[2]}"
    fi
        
    ayudar() {
	local switch="$1"
	
	if [[ ! -f $helpfile ]]; then
	    $progname $switch > $helpfile 2>&1
	fi

	$pager $helpfile
    }
    
    if [[ $exitstat -eq 0 ]]; then
	ayudar --help
    else
	ayudar -h
    fi	
}

mkpass() {
    # generate a 64 character random password
    
    printf "%s" "$(mktemp -u $(for i in {0..63}; do 
                                   printf "%s" "X"; 
                               done))" | gpaste-client

    printf "%s\n" "Password copied to clipboard"
}

mmtail() {
    # pass arbitrary number of files to multitail or
    # all files in a directory
    
    mt() {
	declare -a file
	for object in "$@"; do
	    if [[ -f "$file" ]]; then
		files+=("$file")
	    fi
	done

	multitail $(printf "%s " "${objects[@]}")
    }

    if [[ -z "$@" ]]; then
	mt *
    else
	mt "$@"
    fi
}

backup() {
    # a crappy backup function that needs to become it's
    # own script and launched by systemd
    
    local user="$(whoami)"
    local backup_dir="/run/media/$user/backup"
    local source="/home/$user"
    local dest="$backup_dir/$user"
    
    (while : ; do
	  if [[ -d "$backup_dir" ]] && [[ -n $(pgrep rsync) ]]; then
	      rsync -qa "$source"/ "$dest"/ 1>"$backup_dir"/backup.log 2>"$backup_dir"/backup.err
	  fi

	  sleep 30s
    done &)
}

miotop() {
    # pass arbitrary amount of PIDs to iotop
    
    for pid in $(pgrep "$1"); do
	pids+=( "--pid $pid" )
    done

    sudo iotop $(echo "${pids[@]}")
}

cpw() {
    # copy mpw expression to ~/.mpw, password to clipboard
    # and make alias to expression available

    args="$@"
    domain_name="$(echo "$args" | awk '{ print $NF }')"
    alias_name="${domain_name%.*}"
    
    echo alias "$alias_name"=\'mpw "$args"\' >> ~/.mpw
    mpw $args
    source ~/.mpw
}

rv() {
    log_dir="${HOME}/.removed"
    date=$(date +'%Y-%m-%d_%T')

    if [[ ! -d "$log_dir" ]]; then
	mkdir -p  "$log_dir" || :
    fi
    
    /usr/bin/rm -v "$@" | tee "${log_dir}/removed-${date}"
}

gam() { ${HOME}/bin/gam/gam "$@"; }

gamadv() { ${HOME}/bin/gamadv-xtd3/gam "$@"; }
