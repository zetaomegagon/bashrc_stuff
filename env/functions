#!/usr/bin/env bash

git-sync() {
    ## Add, commit, push functions and aliases.
    ##
    ## NOTES: maybe redirect some stdout and
    ## all stderr to log files

    #@ variables
    local REPO="${HOME}/gits/bashrc_stuff"
    # messaging variables
    local CD_ENTER_MSG="Entering: ${REPO}"
    local DROP_STASH_MSG="Dropping stash"
    local NO_DROP_MSG="No stash to drop"
    local STASH_MSG="Stashing local changes"
    local PULL_MSG="Pulling changes applied by other remotes"
    local APPLY_MSG="Applying local changes"
    local ADD_COMMIT_MSG="Adding changes and generating commit"
    local PUSH_MSG="Pushing changes"
    local NO_CHANGE_MSG="No changes to commit. Exit"
    local DISCARD_ALIAS_MSG="Discarding function definitions"
    local DISCARD_FUNCTION_MSG="Discarding alias definitions "
    local DEF_ALIAS_MSG="Re-initializing alias definitions"
    local DEF_FUNCTION_MSG="Re-initializing function definitions"
    local CD_EXIT_MSG="Leaving: ${REPO}"

    #@ helper functions
    print() {
        # prettry printer
        local input="$@"
        
        if [[ -z $input ]]; then
            printf "\n"
        else
            printf "%s %s %s\n" ">>>" "$@" "..."
        fi
    }

    exists-stash() {
        # check if stashed changes exit
        git stash list | command -p grep -qE '.+'
    }

    discard-definitions() {
        # discard user alias and function
        # definitions. UUoC for readability.
        local input="$1"
        local REPO="${REPO}/env"
        
        case "$input" in
            alias)
                print "$DISCARD_ALIAS_MSG"
                while read -r DEF; do
                    unalias "$DEF"
                done < <(cat $REPO/env/{aliases,spectre,sshpw} | sed -r -e '/^\#/d;/^\s*$/d;s/^alias\s//g;s/=.*$//g')

                print "$DEF_ALIAS_MSG"
                source ${REPO}/aliases
                ;;
            function)
                print "$DISCARD_FUNCTION_MSG"
                while read -r DEF; do
                    unset -f "$DEF" 1>&2
                done < <(cat $REPO/env/{functions,translate} | command -p grep -E "^[a-z-]*\(\)" | cut -d "(" -f 1)

                print "$DEF_FUNCTION_MSG"
                source ${REPO}/functions
                ;;
        esac
    }

    #@ MAIN
    (
        {
            # for pretty printing purposes
            print
            
            # Move to working dir
            { cd "$REPO" && print "$CD_ENTER_MSG"; } || exit 1
            
            # Cleanup any erroneoulsy leftover stashed changes
            if exists-stash; then
                print "$DROP_STASH_MSG"
                git stash drop
            else
                print "$NO_DROP_MSG"
            fi 1>&2

            # Stash changes & sync with main
            print "$STASH_MSG"; { git stash || exit 2; } 1>&2
            print  "$PULL_MSG"; { git pull || exit 3; } 1>&2

            # Apply stashed changes
            if exists-stash; then
                print  "$APPLY_MSG"
                git stash apply
            else
                print "$NO_CHANGE_MSG"
                print "$CD_EXIT_MSG"
                exit 0
            fi 1>&2
            
            # Add all, commit, push
            print  "$ADD_COMMIT_MSG"
            { git add -A || exit 6; } 1>&2
            { git commit -m "auto commited on: $(date -uI'ns')" || exit 7; }  1>&2

            # Good push? Clear the stash
            print "$PUSH_MSG"
            { git push origin master || exit 8; } 1>&2

            if exists-stash; then
                print "$DROP_STASH_MESSAGE"
                git stash drop
            else
                exit 9
            fi 1>&2
            
            # Re-initialize alias and functions definitions
            # and return to old pwd
            discard-definitions alias
            discard-definitions function
            print "$CD_EXIT_MSG"

            # For pretty printing purposes
            print
            
        } 2>/dev/null
    )
}

spectre() {
    # Modified spectre wrapper
    _copy() {
        local _clips=('pbcopy' 'xclip' 'gpaste-client')
        local _use="${_clips[2]}"

        case "$_use" in
            "${_clips[0]}")
                hash "$_use" 2>/dev/null && "$_use" ;;
            "${_clips[1]}")
                hash "$_use" 2>/dev/null && "$_use" ;;
            "${_clips[2]}")
                hash "$_use" 2>/dev/null && "$_use" add-password "" ;;
            *)
                cat; echo 2>/dev/null
                return
        esac

        echo >&2 "Copied!"
    }

    # print help to stdout so that it can be paged
    case "$1" in        
        -h|--help)
            $HOME/bin/spectre -h 2>&1 && return 0 ;;
    esac
    
 	  # Empty the clipboard.
	  :| _copy 2>/dev/null

	  # Ask for the user's name and password if not yet known.
	  SPECTRE_FULLNAME=${SPECTRE_USERNAME:-$(ask 'Your Full Name:')}

	  # restart the gpaste-client daemon because it has
	  # trouble keeping up with clipboard changes.
	  gpaste-client daemon-reexec >/dev/null 2>&1

	  # Start Master Password and copy the output. This is where the
	  # magic begins.
    #
    #Added only read / wrtie json option.
	  printf %s "$(SPECTRE_USERNAME=$SPECTRE_USERNAME command spectre -F j "$@")" | _copy

	  # For gpaste-client: clear last password after 30 seconds
	  if [[ "$_use" = "${_clips[2]}" ]]; then
        # execute in a subshell so that we get back control
        # of the command line
        (
            # group these commands so that we can redirect
            # unwanted output to /dev/null, and run in the
            # background
            {
                _name="spectre_$(mktemp -u XXXXXXXXXXXX)"
                gpaste-client rename-password "" "$_name"
                sleep 30
                gpaste-client delete-password "$_name"
            } >/dev/null 2>&1 &
        )
	  fi
}

spectre-add() {
    # add a spectre command alias to $HOME/.spectre
    local input="${@:-$(</dev/stdin)}"

    if [[ -n "$input" ]]; then
        target_spectre="$HOME/gits/bashrc_stuff/env/spectre"
        aliases=( "$(alias | grep spectre | sed 's:\(alias\|=.*$\)::g')" )

        # create the alias and write to target
        printf "%s\n" "alias ${input%\.*}='spectre -tx -c1 $input'" >> "${target_spectre:-/dev/null}"

        # remove spectre aliases
        for alias in "${aliases[@]}"; do
            unalias "$alias" >/dev/null 2>&1
        done

        # source spectre aliases
        source "$target_spectre"
    fi
}

spectre-list() {
    # list spectre aliases with line numbers
    :
}

spectre-rm() {
    # remove given line in $HOME/.spectre
    :
}

clip() {
    # syntactic sugar for gpaste-client
    /usr/bin/gpaste-client "$@"
}

debug() {
    # naive debug function
    set -x; "$@"; set +x
}

mpv() {
    # call mpv on a file and keep the display from sleeping
    local optimus
    optimus="$(lspci | grep -E 'VGA|3D' | grep -E '[nN]vidia|NVIDIA')"

    play() {
	      inhibit-and-play() {
	          # syntactic sugar
	          systemd-inhibit --what=handle-lid-switch /usr/bin/mpv "$@"
	      }

	      if [[ -z "$optimus" ]]; then
	          inhibit-and-play "$@"
	      else
            # if nvidia graphics card exists, use it
	          DRI_PRIME=1 inhibit-and-play "$@"
	      fi
    }

    play "$@"
}

emacsctl() {
    # syntactic sugar for controlling emacs daemon.
    usage() {
	      printf "%s\n" "Usage: emacsctl {status|start|stop|restart|reload}"
    }

    case "$1" in
	      status|stop|start|restart)
	          systemctl --user "$1" emacs ;;
	      reload)
	          emacsctl restart ;;
	      *)
	          usage
    esac
}

genrandom() {
    # Generate a string of random characters
    # between 4 and 254 characters long
    local input="${1:-64}"

    usage() {
        local ds="  "; local qs="${ds}${ds}"
        snl() { printf "\n"; }
        dnl() { snl; snl; }
        
        snl; printf "%s" "Generates a random string of characters"
        dnl; printf "%s" "${ds}Usage:"
        dnl; printf "%s" "${qs}genrandom [N], where N is a number between 4 and 254 inclusive"
        dnl; printf "%s" "${qs}Run without arguments causes the default string length to be 64"
        dnl
    }

    print-random() {
        local input="$1"
        local genX; genX="$(for ((i=0;i<"$input";i++)); do printf X; done)"
        mktemp -u "$genX"
    }

    if [[ -z "$1" ]]; then
        print-random "$input"
    elif [[ "$input" =~ [0-9]{1,3} ]] && (( "$input" >= 4 )) && (( "$input" <= 254 )); then
        print-random "$input"
    else
        usage        
    fi
}

mmtail() {
    # pass arbitrary number of files to multitail or
    # all files in a directory
    mt() {
        local input=("$@")
	      declare -a files

	      for file in "${input[@]}"; do
	          if [[ -f "$file" ]]; then
                files+=("$file ")
            fi
        done

	      multitail "${files[@]}"
    }

    # if called w/o args, process all files; otherwise
    # process specified files
    if [[ -z "${input[*]}" ]]; then
        mt --
    else
        mt "${input[@]}"
    fi
}

miotop() {
    # pass arbitrary amount of PIDs to iotop
    local input="$1"
    declare -a pids

    for pid in $(pgrep "$input"); do
	      pids+=( "--pid $pid " )
    done

    sudo iotop "${pids[@]}"
}

vmanage() {
    # syntactic sugar for the
    # virtual box admin tool
    /usr/bin/vboxmanage "$@"
}

vterm_printf() {
    # this is for multi-vterm in emacs
    if [[ -n "$TMUX" ]] && { [[ "${TERM%%-*}" = "tmux" ]] || [[ "${TERM%%-*}" = "screen" ]]; }; then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [[ "${TERM%%-*}" = "screen" ]]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}

cpu-profiles() {
    # Get, set, or show current cpu scalings
    local input="$1"

    case "$input" in
        performance|powersave)
            # set scaling
            sudo su -c "echo $arg | tee cat /sys/devices/system/cpu/cpu[0-9]*/cpufreq/scaling_governor" ;;
        --available|-a)
            # show available scalings
            cat /sys/devices/system/cpu/cpufreq/policy6/scaling_available_governors ;;
        --help|-h)

            cat <<EOF
Print or modifies the current cpu governor profile

Useage: cpu_profiles [performance|powersave|--available|-a|--help|-h]

    --available|available         lists the available profiles
    --help|help                   prints this help message

Passing no argument prints the current profile
EOF
            ;;
        *)
            # Get currnet scalings per cpu and pretty print them on one line
            scalingc=( $(cat /sys/devices/system/cpu/cpu[0-9]*/cpufreq/scaling_governor) )
            declare -a scalingp

            for scaling in "${scalingc[@]}"; do
                scalingp+=("$scaling ")
            done

            echo "${scalingp[@]}"

            # protects agains accumulating more values
            # beyond the number of cpu cores if being
            # called in a compound command...not sure
            # why it happens
            unset scalingp
    esac
}

cpu-temps() {
    # Show cpu temps in degrees F, and them print on a single line
    tempc=( $(cat /sys/class/thermal/thermal_zone[0-9]*/temp) )
    declare -a tempf

    for temp in "${tempc[@]}"; do
        tempf+=( "$(( (temp / 1000) * 9/5 + 32 ))F " )
    done

    echo "${tempf[@]}"

    # protects agains accumulating more values
    # beyond the number of cpu cores if being
    # called in a compound command...not sure
    # why it happens...
    unset tempc
}

search() {
    # simple search with firefox and searx.
    # starts firefox with the search query,
    # or creates a new tab in the existing
    # instance
    local baseurl="https://searx.tiekoetter.com/search?preferences="
    local preferences; preferences="$(< $HOME/gits/bashrc_stuff/env/searx-preferences)"
    local engine="!ddg"
    local query; query="&q=${engine}$(sed 's:\s:\%20:g' < <(echo " $*"))"

    if command -p pgrep GeckoMain >/dev/null 2>&1; then
        ( /usr/bin/firefox --new-tab "${baseurl}${preferences}${query}" >/dev/null 2>&1 & )
    else
        ( /usr/bin/firefox --new-instance "${baseurl}${preferences}${query}" >/dev/null 2>&1 & )
    fi
}

decode64() {
    # decodes a base64 input string
    local bpath="$PWD"
    local fname; fname="decoded-$(mktemp -u $(for i in {0..15}; do printf X; done))"
    local fpath="$bpath/$fname"

    # ${input} allows the following or equvalent:
    # $ cat file | decode64 -
    # $ decode64 < <(cat file)
    # $ decode64 $(cat file)
    input="${@:-$(</dev/stdin)}"

    if echo "$input" | base64 -d --ignore-garbage - >/dev/null 2>&1; then
        # this does most of the work
        local extension
        extension="$(echo $input | base64 -d --ignore-garbage - | tee "$fpath" | file --brief --extension -)"

        if [[ -s $fpath ]]; then
            local success="File written to ${fpath}.${extension}"
            mv "$fpath" "${fpath}.${extension}"
            echo "$success"
        else
            rm "$fpath"
            echo "Input is empty."
        fi
    else
        echo "Input is garbage."
    fi
}

pgrep() {
    # print pid and full command line of given input string
    # matching a process name
    local input="$@"

    for proc in "$@"; do
        if command -p pgrep -f "$proc" >/dev/null; then
            printf "%s\n%s\n\n" "---- ${proc} ----" "$(command -p pgrep -aif "$proc")"
        fi     
    done
}

which() {
    # which is deprecated use the 'command' builtin
    # maybe type...?
    local input="$@"

    command -vV "$input"
}

emacs() {
    # connect to the local emacs daemon if non-privleged;
    # or run a standalone terminal session of emacs
    local input="$@"
    enox() { /usr/bin/emacs-nox "$@"; }
    eclt() { /usr/bin/emacsclient -nw "$@"; }

    { ! command -p pgrep emacs && emacsctl start; } >/dev/null 2>&1

    if [[ $UID = 0 ]] || [[ $EUID = 0 ]]; then
        { [[ -z "$input" ]] && enox; } || enox "$input"
    else
        { [[ -z "$input" ]] && eclt; } || eclt "$input"
    fi
}

calc() {
    # start emacs calc mode from command line
    emacs -e < <(printf -- "(calc)")
}

dired() {
    # start dired mode from command line
    input="$@"

    if [[ -z "$input" ]]; then
        emacs .
    else
        emacs "$input"
    fi
}

conntest() {
    # test connection to listed servers at a time, and tries
    # the next on failure. Requires Network Manager.
    #
    # NOTE: since the fucntion uses associative arrays, there
    #       servers are tested at random

    # get status of Network Manager active connections
    local status; status="$(nmcli -g state general status)"

    # string formatting variables
    local dn="\n\n"
    local p="Primary"
    local f="Fallback"

    # associative array of servers
    declare -A servers=(
        ["9.9.9.9"]="Quad9 ${p}"
        ["149.112.112.112"]="Quad9 ${f}"
        ["8.8.8.8"]="Google ${p}"
        ["8.8.4.4"]="Google ${f}"
        ["1.1.1.1"]="Cloudflare ${p}"
        ["1.1.0.0"]="Cloudflare ${f}"
    )
    
    # user messaging helper functions
    nonconn_msg() { printf "%s${dn}" "Network Manager reports no active connections..."; }
    proceed_msg() { local server="$1"; printf "%s${dn}" "Testing connection to the ${server} server"; }
    success_msg() { local server="$1"; printf "%s${dn}" "Connection to the ${server} server completed. The connection is all good!"; }
    failure_msg() {
        local server="$1";
        local this_srv_msg="The ${server} server could not be reached."
        local next_srv_msg="Trying the next server..."
        local no_srv_msg="No servers could be reached. There seems to be someting wrong with the connection..."
        
        if (( "$count" > 0 )); then
            printf "%s${dn}" "${this_srv_msg} ${next_srv_msg}"
        else
            printf "%s${dn}" "${this_srv_msg} ${no_srv_msg}"
        fi
    }
    
    ping-loop() {
        # loops over array of servers and pings each.
        # tries each server in the list for $timeout
        # seconds
        local timeout="$1"
        local count="${#servers[@]}"
        
        for address in "${!servers[@]}"; do                        
            proceed_msg "${servers[$address]}"
            if ping -w "$timeout" "$address" >/dev/null 2>&1; then
                success_msg "${servers[$address]}"
                break
            else
                count=$((count--))
                failure_msg "${servers[$address]}"
            fi
        done
    }

    # main
    if [[ "$status" = "connected" ]]; then
        ping-loop 3
    else
        nonconn_msg
    fi
}

virt-manager() {
    sudo virt-manager
}

decrypt-mech15() {
    local dev_maps=()
    
    for device in /dev/*; do
	if [[ "$device"  =~ nvme.*3 ]]; then
	    local dev_map="crypt_${device#/dev/}"
	    sudo cryptsetup open "$device" "$dev_map" --type luks2
	    dev_maps+=( "/dev/mapper/$dev_map" ) 
	fi
    done

    sudo mount "${dev_maps[0]}" /mnt
}

###########################################################
# Learn 'getopts' ...                                     #
# * https://wiki.bash-hackers.org/howto/getopts_tutorial  #
# ... or another way to parse positional params.          #
#                                                         #
# Also consider combining some of the below and parsing   #
# file names differently                                  #
###########################################################


src () {
    # source various run commands files
    #
    # https://wikiless.org/wiki/Run_commands?lang=en
    case $1 in
        -a)
            source $HOME/.aliases ;;
        -b)
            source $HOME/.bashrc ;;
        -f)
            source $HOME/.functions ;;
        -sp)
            source $HOME/.spectre ;;
        -sh)
            source $HOME/.sshpw ;;
        -t)
            source $HOME/.translate ;;
        --all)
            source $HOME/.{aliases,bashrc,functions,spectre,sshpw,translate} ;;
        *)
            echo "Source various run commands files"
            echo
            echo "Usage:"
            echo " src [options]"
            echo
            echo " -a      source .aliases"
            echo " -b        ''   .bashrc"
            echo " -f        ''   .functions"
            echo " -sp       ''   .spectre"
            echo " -sh       ''   .sshpw"
            echo " -t        ''   .translate"
            echo " --all     ''   all config files"
            echo
    esac
}

edit() {
    # edit various config files
    moz_profile_dir="$HOME/gits/bashrc_stuff/firefox/"
    moz_usr_js="$moz_profile_dir/user.js"
    moz_ovr_js="$moz_profile_dir/user-overrides.js"


    case $1 in
        -a)
            emacs $HOME/.aliases ;;
        -b)
            emacs $HOME/.bashrc ;;
        -f)
            emacs $HOME/.functions ;;
        -sp)
            emacs $HOME/.spectre ;;
        -sh)
            emacs $HOME/.sshpw ;;
        -t)
            emacs $HOME/.translate ;;
        -ujs)
            emacs "$moz_usr_js" ;;
        -uojs)
            emacs "$moz_ovr_js" ;;
        *)
            echo "Edit various configuration files"
            echo
            echo "Usage:"
            echo " edit [options]"
            echo
            echo " -a      edit .aliases"
            echo " -b       ''  .bashrc"
            echo " -f       ''  .functions"
            echo " -sp      ''  .spectre"
            echo " -sh      ''  .sshpw"
            echo " -t       ''  .translate"
            echo " -ujs     ''  FF user.js"
            echo " -uojs    ''  FF user-overrides.js"
            echo
    esac
}

preview() {
    # preview various config files
    moz_profile_dir="$HOME/gits/bashrc_stuff/firefox/"
    moz_usr_js="$moz_profile_dir/user.js"
    moz_ovr_js="$moz_profile_dir/user-overrides.js"

    case $1 in
        -a)
            "$PAGER" $HOME/.aliases ;;
        -b)
            "$PAGER" $HOME/.bashrc ;;
        -f)
            "$PAGER" $HOME/.functions ;;
        -sp)
            "$PAGER" $HOME/.spectre ;;
        -sh)
            "$PAGER" $HOME/.sshpw ;;
        -t)
            "$PAGER" $HOME/.translate ;;
        -ujs)
            "$PAGER" "$moz_usr_js" ;;
        -uojs)
            "$PAGER" "$moz_ovr_js" ;;
        --all-shell)
            "$PAGER" $HOME/.{aliases,bashrc,functions,spectre,sshpw,translate} ;;
        --all-moz)
            "$PAGER" $moz_{usr,ovr}_js ;;
        *)
            echo "Preview various configuration files"
            echo
            echo "Usage:"
            echo " preview [options]"
            echo
            echo " -a         preview .aliases"
            echo " -b           ''    .bashrc"
            echo " -f           ''    .functions"
            echo " -sp          ''    .spectre"
            echo " -sh          ''    .sshpw"
            echo " -t           ''    .translate"
            echo " -ujs         ''    FF user.js"
            echo " -uojs        ''    FF user-overrides.js"
            echo " --all-shell  ''    all shell config files"
            echo " --all-moz    ''    user.js and user-overrides.js"
            echo
    esac
}

nautilus() {
    # run nautilus file manager from command line
    # w/o any fuss
    ( command -p nautilus "$@" >/dev/null 2>&1 & )
}

explain() {
    # query ManKier man pages for specific options to commands
    #
    # https://www.mankier.com/api#Explain_a_Shell_Command
    local cols="cols=80"
    local query; query="&q=$(sed 's:\s:\%20:g' < <(echo "$*"))"
    local base_url="https://www.mankier.com/api/v2/explain/?"

    curl -s -X GET "${base_url}${cols}${query}"
}

flatpack() { /usr/bin/flatpak "$@"; }

## Toolbox Wrapper Functions
toolbox-create() {
    # create a new toolbox and upgrade it
    #
    # NOTE: make sure to modify /etc/dnf/dnf.conf with
    #       - max_parallel_downloads=10
    #       - fastest_mirror=True
    #
    # toolbox-create <distro> <release> <container_name>
    :
}

toolbox-upgrade() {
    # upgrade an existing toolbox
    #
    # toolbox-upgrade <container_name>
    :
}

toolbox-install() {
    # install an application inside an existing toolbox
    #
    # toolbox-install <container_name> <applicaton_name>
    :
}

toolbox-run() {
    # run a program inside a given contianer
    #
    # toolbox-run <container_name> <application_name>
    :
}

# Example on demand toolbox creation
gnome-tweaks-demo-toolbox() {    
    # if toolbox list | command -p grep -q "gnome-tweaks"; then
    #     (
    #         toolbox-upgrade gnome-tweaks
    #         toolbox-run gnome-tweaks "gnome-tweaks"
    #     ) >/dev/null 2>&1 &
    # else
    #     (
    #         toolbox-create fedora 36 gnome-tweaks
    #         toolbox-upgrade gnome-tweaks
    #         toolbox-install gnome-tweaks gnome-tweaks
    #         toolbox-run gnome-tweaks "gnome-tweaks"
    #     ) >/dev/null 2>&1 &
    # fi
    
    :
}

dnf() {
    local input=( $@ )
    local arg0=${input[0]}

    if [[ "$arg0" = "search" ]]; then
        toolbox --container dnf run -- sudo dnf "${input[@]}" \
            | less \
            | sed 's:\^O::g'
    else
        toolbox --container dnf run -- sudo dnf "${input[@]}"
    fi    
}

gnome-tweaks() {
    (
        toolbox --container gnome-tweaks run -- gnome-tweaks >/dev/null 2>&1 &
    )
}

