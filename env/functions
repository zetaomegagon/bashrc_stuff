#!/usr/bin/env bash

git-sync() {
    # Add, commit, push functions and aliases.
    # Hopefully safely
    local repo="${HOME}/gits/bashrc_stuff"

    (
        # move to working dir
        cd "$repo" || exit

        # ensure stash is clean
        [[ -n "$(git stash list)" ]] && git stash drop

        # stash changes (if any) & sync with github repo
        git stash
        git pull

        # apply stash (if any)
        [[ -n "$(git stash list)" ]] && git stash apply

        # Add all, commit, push
        git add -A
        git commit -m "auto commited on: $(date -I'ns')"

        # Good push? Drop the stash
        git push origin master && git stash drop
    )

    # Source updated .bashrc
    { unalias -a; unset -fn; } && source "${HOME}/.bashrc"
}

spectre() {
    # Modified spectre wrapper
    _copy() {
        local _clips=('pbcopy' 'xclip' 'gpaste-client')
        local _use="${_clips[2]}"

        case "$_use" in
            "${_clips[0]}")
                hash "$_use" 2>/dev/null && "$_use" ;;
            "${_clips[1]}")
                hash "$_use" 2>/dev/null && "$_use" ;;
            "${_clips[2]}")
                hash "$_use" 2>/dev/null && "$_use" add-password "" ;;
            *)
                cat; echo 2>/dev/null
                return
        esac

        echo >&2 "Copied!"
    }

    if [[ "$1" =~ (-h|--help) ]]; then
        # print help to stdout
        $HOME/bin/spectre -h 2>&1
    else
 	      # Empty the clipboard.
	      :| _copy 2>/dev/null

	      # Ask for the user's name and password if not yet known.
	      SPECTRE_FULLNAME=${SPECTRE_USERNAME:-$(ask 'Your Full Name:')}

	      # restart the gpaste-client daemon because it has
	      # trouble keeping up with clipboard changes.
	      gpaste-client daemon-reexec >/dev/null 2>&1

	      # Start Master Password and copy the output. This is where the
	      # magic begins.
	      printf %s "$(SPECTRE_USERNAME=$SPECTRE_USERNAME command spectre -F n "$@")" | _copy

	      # For gpaste-client: clear last password after 30 seconds
	      if [[ "$_use" = "${_clips[2]}" ]]; then
            (
                {
                    _name="spectre_$(mktemp -u XXXXXXXXXXXX)"
                    gpaste-client rename-password "" "$_name"
                    sleep 30
                    gpaste-client delete-password "$_name"
                } >/dev/null 2>&1 &
            )
	      fi
    fi
}

spectre-add() {
    # add a spectre command alias to $HOME/.spectre
    local input="${@:-$(</dev/stdin)}"

    if [[ -n "$input" ]]; then
        target_spctr="$HOME/gits/bashrc_stuff/env/spectre"
        aliases="$(alias | grep spectre | sed 's:\(alias\|=.*$\)::g')"

        # create the alias and write to target
        printf "%s\n" "alias "${input%\.*}"='spectre -tx -c1 $input'" | tee -a "${target_spctr:-/dev/null}"

        # remove spectre aliases
        for alias in $aliases; do
            unalias "$alias"
        done

        # source spectre aliases
        source "$target_spctr"
    fi
}

spectre-list() {
    # list spectre aliases with line numbers
    :
}

spectre-rm() {
    # remove given line in $HOME/.spectre
    :
}

clip() {
    # syntactic sugar for gpaste-client
    /usr/bin/gpaste-client "$@"
}

debug() {
    # naive debug function
    set -x; "$@"; set +x
}

mpv() {
    # call mpv on a file and keep the display from sleeping
    local optimus
    optimus="$(lspci | grep -E 'VGA|3D' | grep -E '[nN]vidia|NVIDIA')"

    play() {
	      inhibit-and-play() {
	          # syntactic sugar
	          systemd-inhibit --what=handle-lid-switch /usr/bin/mpv "$@"
	      }

	      if [[ -z "$optimus" ]]; then
	          inhibit-and-play "$@"
	      else
            # if nvidia graphics card exists, use it
	          DRI_PRIME=1 inhibit-and-play "$@"
	      fi
    }

    play "$@"
}

emacsctl() {
    # syntactic sugar for controlling emacs daemon.
    usage() {
	      printf "%s\n" "Usage: emacsctl {status|start|stop|restart|reload}"
    }

    case "$1" in
	      status|stop|start|restart)
	          systemctl --user "$1" emacs ;;
	      reload)
	          emacsctl restart ;;
	      *)
	          usage
    esac
}

genrandom() {
    local input="${1:-64}"

    case "$input" in
        [4-9][0-9]{2,})
            random="$(mktemp -u "$(for ((i=1;i<"$input";i++)); do printf X; done)")"
            printf "%s" "$random" | gpaste-client
            printf "%s\n" "$random"
            ;;
        *)
            : # finish me!!!
    esac
}

mmtail() {
    # pass arbitrary number of files to multitail or
    # all files in a directory
    mt() {
        local input=("$@")
	      declare -a files

	      for file in "${input[@]}"; do
	          if [[ -f "$file" ]]; then
                files+=("$file ")
            fi
        done

	      multitail "${files[@]}"
    }

    # if called w/o args, process all files; otherwise
    # process specified files
    if [[ -z "${input[*]}" ]]; then
        mt --
    else
        mt "${input[@]}"
    fi
}

miotop() {
    # pass arbitrary amount of PIDs to iotop
    local input="$1"
    declare -a pids

    for pid in $(pgrep "$input"); do
	      pids+=( "--pid $pid " )
    done

    sudo iotop "${pids[@]}"
}

vmanage() {
    # syntactic sugar for the
    # virtual box admin tool
    /usr/bin/vboxmanage "$@"
}

vterm_printf() {
    # this is for multi-vterm in emacs
    if [[ -n "$TMUX" ]] && { [[ "${TERM%%-*}" = "tmux" ]] || [[ "${TERM%%-*}" = "screen" ]]; }; then
        # Tell tmux to pass the escape sequences through
        printf "\ePtmux;\e\e]%s\007\e\\" "$1"
    elif [[ "${TERM%%-*}" = "screen" ]]; then
        # GNU screen (screen, screen-256color, screen-256color-bce)
        printf "\eP\e]%s\007\e\\" "$1"
    else
        printf "\e]%s\e\\" "$1"
    fi
}

dnf() {
    # run dnf from a toolbox container, or
    # create the toolbox, update it, and
    # run dnf.
    #
    # on container creation optimize dnf,
    # increasing parallel downloads and
    # using the fastest mirror
    local distro=fedora
    local release; release="$(uname -r | awk -F'.' '{print $(NF -1)}' | sed 's:fc::')"
    local name=\dnf
    local dnf_conf="\"%s\\n%s\\n\" \"max_parallel_downloads=10\" \"fastestmirror=True\""
    export DNF_EXIT_STATUS

    if ! toolbox list | command -p grep -iq dnf; then
        {
            toolbox --distro "$distro" --release "$release" create "$name" || { DNF_EXIT_STATUS=1 && return $DNF_EXIT_STATUS; }
            toolbox --container "$name" run sudo su -c "printf  $dnf_conf >> /etc/dnf/dnf.conf" || { DNF_EXIT_STATUS=2 && return $DNF_EXIT_STATUS; }
            toolbox --container "$name" run sudo dnf -yq upgrade || { DNF_EXIT_STATUS=3 && return $DNF_EXIT_STATUS; }
        } >/dev/null 2>&1

        toolbox --container "$name" run sudo dnf $@ || { DNF_EXIT_STATUS=4 && return $DNF_EXIT_STATUS; }
        podman stop "$name" >/dev/null || { DNF_EXIT_STATUS=5 && return $DNF_EXIT_STATUS; }
        DNF_EXIT_STATUS=$?
    else

        toolbox --container "$name" run sudo dnf $@ || { DNF_EXIT_STATUS=4 && return $DNF_EXIT_STATUS; }
        podman stop "$name" >/dev/null || { DNF_EXIT_STATUS=5 && return $DNF_EXIT_STATUS; }
        DNF_EXIT_STATUS=$?
    fi
}


gnome-tweaks() {
    # run gnome-tweaks from a toolbox container, or
    # create the toolbox, install gnome-tweaks, and
    # run it.
    #
    # In either case update the container before
    # running gnome-tweaks
    local distro=fedora
    local release; release="$(uname -r | awk -F'.' '{print $(NF -1)}' | sed 's:fc::')"
    local name=\gnome-tweaks
    local dnf_conf="\"%s\\n%s\\n\" \"max_parallel_downloads=10\" \"fastestmirror=True\""

    if ! toolbox list | command -p grep -iq gnome-tweaks; then
        (
            {
                toolbox --distro "$distro" --release  "$release" create "$name" || return 1
                toolbox --container "$name" run sudo "printf $dnf_conf >> /etc/dnf/dnf.conf" || return 2
                toolbox --container "$name" run sudo su -c "dnf upgrade -yq && dnf install -yq gnome-tweaks" || return 3
                toolbox --container "$name" run "$name"

                podman stop "$name"
            } >/dev/null 2>&1 &
        )
    else
        (
            {
                toolbox --container "$name" run sudo su -c "dnf upgrade -yq && $name"
                podman stop "$name"
            } >/dev/null 2>&1 &
        )
    fi
}

cpu-profiles() {
    # Get, set, or show current cpu scalings
    local input="$1"

    case "$input" in
        performance|powersave)
            # set scaling
            sudo su -c "echo $arg | tee cat /sys/devices/system/cpu/cpu[0-9]*/cpufreq/scaling_governor" ;;
        --available|-a)
            # show available scalings
            cat /sys/devices/system/cpu/cpufreq/policy6/scaling_available_governors ;;
        --help|-h)

            cat <<EOF
Print or modifies the current cpu governor profile

Useage: cpu_profiles [performance|powersave|--available|-a|--help|-h]

    --available|available         lists the available profiles
    --help|help                   prints this help message

Passing no argument prints the current profile
EOF
            ;;
        *)
            # Get currnet scalings per cpu and pretty print them on one line
            scalingc=( $(cat /sys/devices/system/cpu/cpu[0-9]*/cpufreq/scaling_governor) )
            declare -a scalingp

            for scaling in "${scalingc[@]}"; do
                scalingp+=("$scaling ")
            done

            echo "${scalingp[@]}"

            # protects agains accumulating more values
            # beyond the number of cpu cores if being
            # called in a compound command
            scalingp=()
    esac
}

cpu-temps() {
    # Show cpu temps in degrees F, and them print on a single line
    tempm=( $(cat /sys/class/thermal/thermal_zone[0-9]*/temp) )
    declare -a tempf

    for temp in "${tempm[@]}"; do
        tempf+=( "$(( (temp / 1000) * 9/5 + 32 ))F " )
    done

    echo "${tempf[@]}"

    # protects agains accumulating more values
    # beyond the number of cpu cores if being
    # called in a compound command
    tempm=()
}

search() {
    # simple search with firefox and searx.
    # starts firefox with the search query,
    # or creates a new tab in the existing
    # instance
    local baseurl="https://searx.tiekoetter.com/search?preferences="
    local preferences; preferences="$(< $HOME/gits/bashrc_stuff/env/searx-preferences)"
    local engine="!ddg"
    local query; query="&q=${engine}$(sed 's:\s:\%20:g' < <(echo " $*"))"

    if command -p pgrep GeckoMain >/dev/null 2>&1; then
        ( /usr/bin/firefox --new-tab "${baseurl}${preferences}${query}" >/dev/null 2>&1 & )
    else
        ( /usr/bin/firefox --new-instance "${baseurl}${preferences}${query}" >/dev/null 2>&1 & )
    fi
}

decode64() {
    # decodes a base64 input string
    local bpath="$PWD"
    local fname; fname="decoded-$(mktemp -u $(for i in {0..15}; do printf X; done))"
    local fpath="$bpath/$fname"

    # ${input} allows the following or equvalent:
    # $ cat file | decode64 -
    # $ decode64 < <(cat file)
    # $ decode64 $(cat file)
    input="${@:-$(</dev/stdin)}"

    if echo "$input" | base64 -d --ignore-garbage - >/dev/null 2>&1; then
        # this does most of the work
        local extension
        extension="$(echo $input | base64 -d --ignore-garbage - | tee "$fpath" | file --brief --extension -)"

        if [[ -s $fpath ]]; then
            local success="File written to ${fpath}.${extension}"
            mv "$fpath" "${fpath}.${extension}"
            echo "$success"
        else
            rm "$fpath"
            echo "Input is empty."
        fi
    else
        echo "Input is garbage."
    fi
}

pgrep() {
    # print pid and full command line of given input string
    # matching a process name
    local input=("$@")

    for proc in "${input[@]}"; do
        printf "%s\n%s\n\n" "---- ${proc} ----" "$(command -p pgrep -aif "$proc")"
    done
}

which() {
    # which is deprecated use the 'command' builtin
    # maybe type...?
    local input="$@"

    command -vV "$input"
}

emacs() {
    # connect to the local emacs daemon if non-privleged;
    # or run a standalone terminal session of emacs
    local input="$@"
    enox() { /usr/bin/emacs-nox "$@"; }
    eclt() { /usr/bin/emacsclient -nw "$@"; }

    ! ( command -p pgrep emacs ) && emacsctl start

    if [[ $UID = 0 ]] || [[ $EUID = 0 ]]; then
        { [[ -z "$input" ]] && enox; } || enox "$input"
    else
        { [[ -z "$input" ]] && eclt; } || eclt "$input"
    fi
}


###########################################################
# Learn 'getopts' ...                                     #
# * https://wiki.bash-hackers.org/howto/getopts_tutorial  #
# ... or another way to parse positional params.          #
#                                                         #
# Also consider combining some of the below and parsing   #
# file names differently                                  #
###########################################################


src () {
    # source various config files
    case $1 in
        -a)
            source $HOME/.aliases ;;
        -b)
            source $HOME/.bashrc ;;
        -f)
            source $HOME/.functions ;;
        -sp)
            source $HOME/.spectre ;;
        -sh)
            source $HOME/.sshpw ;;
        -t)
            source $HOME/.translate ;;
        --all)
            source $HOME/.{aliases,bashrc,functions,spectre,sshpw,translate} ;;
        *)
            echo "Source various configuration files"
            echo
            echo "Usage:"
            echo " src [options]"
            echo
            echo " -a      source .aliases"
            echo " -b        ''   .bashrc"
            echo " -f        ''   .functions"
            echo " -sp       ''   .spectre"
            echo " -sh       ''   .sshpw"
            echo " -t        ''   .translate"
            echo " --all     ''   all config files"
            echo
    esac
}

edit() {
    # edit various config files
    moz_profile_dir="$HOME/.mozilla/firefox/gm15iqn0.elijah-arkenfox/"
    moz_usr_js="$moz_profile_dir/user.js"
    moz_ovr_js="$moz_profile_dir/user-overrides.js"


    case $1 in
        -a)
            emacs $HOME/.aliases ;;
        -b)
            emacs $HOME/.bashrc ;;
        -f)
            emacs $HOME/.functions ;;
        -gt)
            toolbox --container gnome-tweaks run "sudo nano /etc/dnf/dnf.conf" ;;
        -sp)
            emacs $HOME/.spectre ;;
        -sh)
            emacs $HOME/.sshpw ;;
        -t)
            emacs $HOME/.translate ;;
        -ujs)
            emacs "$moz_usr_js" ;;
        -uojs)
            emacs "$moz_ovr_js" ;;
        *)
            echo "Edit various configuration files"
            echo
            echo "Usage:"
            echo " edit [options]"
            echo
            echo " -a      edit .aliases"
            echo " -b       ''  .bashrc"
            echo " -f       ''  .functions"
            echo " -gt      ''  gnome-tweaks dnf.conf"
            echo " -sp      ''  .spectre"
            echo " -sh      ''  .sshpw"
            echo " -t       ''  .translate"
            echo " -ujs     ''  FF user.js"
            echo " -uojs    ''  FF user-overrides.js"
            echo
    esac
}

preview() {
    # preview various config files
    moz_profile_dir="$HOME/.mozilla/firefox/gm15iqn0.elijah-arkenfox/"
    moz_usr_js="$moz_profile_dir/user.js"
    moz_ovr_js="$moz_profile_dir/user-overrides.js"

    case $1 in
        -a)
            "$PAGER" $HOME/.aliases ;;
        -b)
            "$PAGER" $HOME/.bashrc ;;
        -f)
            "$PAGER" $HOME/.functions ;;
        -sp)
            "$PAGER" $HOME/.spectre ;;
        -sh)
            "$PAGER" $HOME/.sshpw ;;
        -t)
            "$PAGER" $HOME/.translate ;;
        -ujs)
            "$PAGER" "$moz_usr_js" ;;
        -uojs)
            "$PAGER" "$moz_ovr_js" ;;
        --all-shell)
            "$PAGER" $HOME/.{aliases,bashrc,functions,spectre,sshpw,translate} ;;
        --all-moz)
            "$PAGER" "$moz_{usr,ovr}_js" ;;
        *)
            echo "Preview various configuration files"
            echo
            echo "Usage:"
            echo " preview [options]"
            echo
            echo " -a         preview .aliases"
            echo " -b           ''    .bashrc"
            echo " -f           ''    .functions"
            echo " -sp          ''    .spectre"
            echo " -sh          ''    .sshpw"
            echo " -t           ''    .translate"
            echo " -ujs         ''    FF user.js"
            echo " -uojs        ''    FF user-overrides.js"
            echo " --all-shell  ''    all shell config files"
            echo " --all-moz    ''    user.js and user-overrides.js"
            echo
    esac
}

nautilus() {
    # run nautilus file manager from commandline
    # w/o any fuss
    (
        {
            command -p nautilus "$@" &
        } >/dev/null 2>&1
    )
}

explain() {
    # query ManKier man pages for specific options to commands
    #
    # https://www.mankier.com/api#Explain_a_Shell_Command
    local cols="cols=80"
    local query; query="&q=$(sed 's:\s:\%20:g' < <(echo "$*"))"
    local base_url="https://www.mankier.com/api/v2/explain/?"

    curl -s -X GET "${base_url}${cols}${query}"
}

