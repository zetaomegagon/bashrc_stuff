#!/usr/bin/env bash

declare i2c_mem_dev="/sys/bus/i2c/devices/i2c-11/new_device"

init-jc42() {
    ## insert kernel modules for detecting dimm tempratures
    if ! lsmod | grep -q i2c_dev; then modprobe i2c_dev; fi
    if ! lsmod | grep -q jc42; then modprobe jc42; fi

    ## create new i2c device for bus 11
    ## based on the ouput of `i2cdetect -l` and `i2cdetect -y 11`
    printf -- "jc42 0x44" > "$i2c_mem_dev"
}

if [[ $EUID = 0 ]]; then
    init-jc42
else
    ## $i2c_mem_dev is not writeable unless logged in as root
    ## so we need to execute our above function, but in a root
    ## environment.
    embedded_fun="$(declare -pf)"    # capture the stringified function definition in a variable
    fun_name="${embedded_fun%\(*}"   # strip all but the function name
    
    ## since process substitution creates a new environment
    ## we can pass in the function definition and function
    ## call as a text string.
    ##
    ## Basically:
    ##  * printf passes a string like, "init-jc42() { *body*; }; init-jc42"
    ##    into a file descriptor
    ##  * input redirection feeds the contents of the FD into a bash instance
    ##  * bash evaluates the string to be a function definition, and a function
    ##    call
    ##  * since bash was executed in a root environment, the function is callable
    ##
    sudo -u root bash < <(printf "%s" "${embedded_fun}; ${fun_name}")
fi

