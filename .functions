#!/bin/bash

## Start tmux on every shell login
tmux-start() {
    if which tmux >/dev/null 2>&1; then
        if [[ -z "$TMUX" ]] ;then
            ID="$(tmux ls | grep -vm1 attached | cut -d: -f1)"
	    if [[ -z "$ID" ]] ;then 
                tmux new-session
            else
                tmux attach-session -t "$ID"
            fi
        fi
    fi
}

## Start 9h of rain sleep sounds
rain() {
    local mpv="/usr/bin/mpv"
    local music_dir="$HOME/Music"
    local track="rain.mp3"
    local track_url="https://www.youtube.com/watch?v=xoirXUhEpIo"

    make-it-rain() {
	("$mpv" --no-video "$1" >/dev/null 2>&1 & touch /tmp/rain.$!)
    }

    [[ ! -e "$mpv" ]] && sudo dnf -qy install mpv

    if [[ -f "${music_dir}/$track" ]]; then
	make-it-rain "${music_dir}/$track"
    else
	make-it-rain "$track_url"
    fi
}

## Kill the rain
kill-rain() {
    for file in $(echo /tmp/rain.*); do
	local pid=${file#/tmp/rain\.}
	kill $pid 2>/dev/null
	rm /tmp/rain.$pid
    done
}

## Add, commit, push functions and aliases
git-sync() {
    local repo="${HOME}/gits/bashrc_stuff"
    
    [[ $(pwd) != "$repo" ]] && pushd "$repo" >/dev/null 2>&1

    [[ ! -z "$(git stash list)" ]] && git stash drop

    git stash >/dev/null 2>&1
    git pull

    [[ ! -z "$(git stash list)" ]] && git stash apply

    git add -A
    git commit -m "auto commited on: $(date -u '+%F %T') [UTC]"
    git push origin master

    [[ $? -eq 0 ]] && git stash drop

    popd >/dev/null 2>&1

    . ${HOME}/.bashrc
}

## Mpw helper function
mpw() {
    _copy() {
        _clips=('pbcopy' 'xclip' 'gpaste-client')
        _use="${_clips[2]}"

        case "$_use" in
            "${_clips[0]}")
                hash "$_use" 2>/dev/null && "$_use" ;;
            "${_clips[1]}")
                hash "$_use" 2>/dev/null && "$_use" ;;
            "${_clips[2]}")
                hash "$_use" 2>/dev/null && "$_use" add-password "" ;;
            *)
                cat; echo 2>/dev/null
                return
        esac

        echo >&2 "Copied!"
    }

    if [[ "$1" = "-h" ]]; then
	# Call the binary directly when passing help flag so we
	# don't get ugly output and double output with pager
	
	${HOME}/bin/mpw -h > /tmp/mpw_help 2>&1
	less /tmp/mpw_help
	rm /tmp/mpw_help
	(exit 0)
    else
	# Empty the clipboard
	:| _copy 2>/dev/null

	# Ask for the user's name and password if not yet known.
	MPW_FULLNAME=${MPW_FULLNAME:-$(ask 'Your Full Name:')}

	# Start Master Password and copy the output.
	printf %s "$(MPW_FULLNAME=$MPW_FULLNAME command mpw "$@")" | _copy

	# For gpaste-client: clear last password after 30 seconds
	if [[ "$_use" = "${_clips[2]}" ]]; then
            ({ _name="$(mktemp -u XXXXXXXXXXXX)";
               gpaste-client rename-password "" "$_name";
               sleep 30;
               gpaste-client delete-password "$_name"; } >/dev/null 2>&1 &)
	fi
    fi
}

kill-chromium() {
    local pids=$(psgrep chromium-browser | grep $1 | awk '{ print $1 }')

    for pid in $pids; do
	kill -HUP "$pid"
    done
}

chrome() {
    base_dir="${HOME}/.config/google-chrome"
    temp_dir="/tmp/google-chrome"
    default_cache_dir="${HOME}/.cache/google-chrome"
    
    ({ if [[ ! -d "$temp_dir" ]]; then
	   mkdir "$temp_dir"
       fi

       cache_dir="$(mktemp -d -p ${temp_dir} $(for i in {0..64}; do printf X; done))"
       
       /usr/bin/google-chrome --fullscreen --disk-cache-dir="$cache_dir" &

       wait $!

       rm -rf ${base_dir}/Local\ State

       FILES=( 'History' 'History-journal' 'History Provider Cache'
	       'Cookies' 'Cookies-journal' 'Current Session' 'Current Tabs'
	       'Top Sites' 'Top Sites-journal' 'Visited Links' 'Web Data'
	       'Web Data-journal' 'Sync Data' 'Local Storage' 'Session Storage'
	       'Storage' 'Last Session' 'Login Data' 'Login Data-journal' )
       
       for FILE in "${FILES[@]}"; do
	   rm -rf ${base_dir}/Default/"$FILE"
       done

       if [[ -d "$default_cache_dir" ]]; then
	   rm -rf "$default_cache_dir"
       fi

       rm -rf "$cache_dir"
       
      } >/dev/null 2>&1 &)
    }

clipc() {
    # Clear gpaste-client history
    local date="$(date -u '+%F %T')"
    
    while :; do
	gpaste-client empty && \
	    printf "Automatically cleared on [%s] [UTC]" "$date" \
		| gpaste-client
	sleep 1h
    done
}
