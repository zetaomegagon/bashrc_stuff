#!/bin/bash

## Start tmux on every shell login
tmux-start() {
    if which tmux >/dev/null 2>&1; then
        if [[ -z "$TMUX" ]] ;then
            ID="$(tmux ls | grep -vm1 attached | cut -d: -f1)"
	    if [[ -z "$ID" ]] ;then 
                tmux new-session
            else
                tmux attach-session -t "$ID"
            fi
        fi
    fi
}

## Start 9h of rain sleep sounds
rain() {
    local mpv="/usr/bin/mpv"
    local music_dir="$HOME/Music"
    local track="rain.mp3"
    local track_url="https://www.youtube.com/watch?v=xoirXUhEpIo"

    make-it-rain() {
	("$mpv" --no-video "$1" >/dev/null 2>&1 & touch /tmp/rain.$!)
    }

    [[ ! -e "$mpv" ]] && sudo dnf -qy install mpv

    if [[ -f "${music_dir}/$track" ]]; then
	make-it-rain "${music_dir}/$track"
    else
	make-it-rain "$track_url"
    fi
}

## Kill the rain
kill-rain() {
    for file in $(echo /tmp/rain.*); do
	local pid=${file#/tmp/rain\.}
	kill $pid 2>/dev/null
	rm /tmp/rain.$pid
    done
}

## Add, commit, push functions and aliases
git-sync() {
    local repo="${HOME}/gits/bashrc_stuff"

    # move to working dir 
    [[ $(pwd) != "$repo" ]] && pushd "$repo" >/dev/null 2>&1

    # ensure stash is clean
    [[ ! -z "$(git stash list)" ]] && git stash drop

    # stash changes (if any) & sync with github repo
    git stash >/dev/null 2>&1
    git pull

    # apply stash (if any)
    [[ ! -z "$(git stash list)" ]] && git stash apply

    # Add all, commit, push
    git add -A
    git commit -m "auto commited on: $(date -u '+%F %T') [UTC]"
    git push origin master

    # Good push? Drop the stash
    [[ $? -eq 0 ]] && git stash drop

    # Return to origin dir
    popd >/dev/null 2>&1

    # Source updated .bashrc
    . ${HOME}/.bashrc
}

## Mpw helper function
mpw() {
    _copy() {
        _clips=('pbcopy' 'xclip' 'gpaste-client')
        _use="${_clips[2]}"

        case "$_use" in
            "${_clips[0]}")
                hash "$_use" 2>/dev/null && "$_use" ;;
            "${_clips[1]}")
                hash "$_use" 2>/dev/null && "$_use" ;;
            "${_clips[2]}")
                hash "$_use" 2>/dev/null && "$_use" add-password "" ;;
            *)
                cat; echo 2>/dev/null
                return
        esac

        echo >&2 "Copied!"
    }

    if [[ "$1" = "-h" ]]; then
	# Call the binary directly when passing help flag so we
	# don't get ugly output and double output with pager
	
	if [[ ! -f /tmp/mpw_help ]]; then
	    ${HOME}/bin/mpw -h > /tmp/mpw_help 2>&1
	fi
	
	less /tmp/mpw_help
    else
 	# Empty the clipboard
	:| _copy 2>/dev/null

	# Ask for the user's name and password if not yet known.
	MPW_FULLNAME=${MPW_FULLNAME:-$(ask 'Your Full Name:')}

	# Start Master Password and copy the output.
	printf %s "$(MPW_FULLNAME=$MPW_FULLNAME command mpw "$@")" | _copy

	# For gpaste-client: clear last password after 30 seconds
	if [[ "$_use" = "${_clips[2]}" ]]; then
            ({ _name="$(mktemp -u XXXXXXXXXXXX)";
               gpaste-client rename-password "" "$_name";
               sleep 30;
               gpaste-client delete-password "$_name"; } >/dev/null 2>&1 &)
	fi
    fi
}

kill-chromium() {
    local pids=$(psgrep chromium-browser | grep $1 | awk '{ print $1 }')

    for pid in $pids; do
	kill -HUP "$pid"
    done
}

clipc() {
    # Clear gpaste-client history
    local date="$(date -u '+%F %T')"
    
    while :; do
	gpaste-client empty && \
	    printf "Automatically cleared on [%s] [UTC]" "$date" \
		| gpaste-client
	sleep 1h
    done
}

notify() {
    previous_volume=$(amixer get Master \
			  | tail -1 \
			  | awk '{ print $4 }' \
			  | tr -d \[ \
			  | tr -d \])

    amixer set Master 100% >/dev/null 2>&1; sleep .5

    espeak "Task complete."; sleep .5

    amixer set Master "$previous_volume" >/dev/null 2>&1
}

timer() {
    if [[ "$1" =~ [0-9]+ ]]; then
	(sleep "$1" &)
	wait $!
	for ((c=0;c<60;c++)); do
	    ({ notify; sleep 1; } &)
	done
    else
	printf "Usage: timer <number_with_units>\\n"
    fi
}

aria2-start() {
    local aria2_path="/home/ebeale/.config/aria2"
    local conf_path="$aria2_path/aria2.conf"
    local session_path="$aria2_path/aria2.session"

    aria2-call() {
	(aria2c \
	     --enable-rpc \
	     --rpc-listen-all=true \
	     --rpc-allow-origin-all=true \
	     --conf-path="$conf_path" \
	     --input-file="$session_path" \
	     >/dev/null 2>&1 &)
	}
    
    if [[ -z "$(pgrep aria2c)" ]]; then
	if [[ ! -f "$session_path" ]]; then
	    touch "$session_path"
	    aria2-call
	else
	    aria2-call
	fi
    fi
}

aria2-restart() {
    if [[ -z "$(pgrep aria2c)" ]]; then
	aria2-start
    else
	pkill aria2c
	sleep 1
	aria2-start
    fi
}

dirspike() {
    # Set clean state
    currentDir="$(pwd)"
    cd
    
    # Clean the screen
    clear
    sleep .5
    
    # Top half
    printf "~\\n"
    
    for dir in $(echo "*"); do
	pushd "${HOME}/$dir"
    done

    # bottom half
    for dir in $(popd 2>/dev/null); do
	popd 2>/dev/null
    done

    # Back in time!
    cd "$currentDir"
}

debug() {
    set -x
    "$@"
    set +x
}

mpv() {
    # call mpv on a file and keep the display from sleeping
    local optimus="$(lspci | grep -E 'VGA|3D' | grep -E 'nvidia|Nvidia|NVIDIA')"
    
    play() {
	# if nvidia optimus graphics card exists, use it
	inhibit-lid-switch() {
	     # syntactic sugar
	     systemd-inhibit --what=handle-lid-switch /usr/bin/mpv "$@"
	 }
	 
	if [[ -z "$optimus" ]]; then
	    inhibit-lid-switch "$@"
	else
	    DRI_PRIME=1 inhibit-lid-switch "$@"
	fi
    }
   
    play "$@" 
}
