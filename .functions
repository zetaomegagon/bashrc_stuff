#!/bin/bash

## Start tmux on every shell login
tmux-start() {
    if which tmux >/dev/null 2>&1; then
        if [[ -z "$TMUX" ]] ;then
	    # get the id of a deattached session
            ID="$( tmux ls | grep -vm1 attached | cut -d: -f1 )"
            if [[ -z "$ID" ]] ;then # if not available create a new one
                tmux new-session
            else
                tmux attach-session -t "$ID" # if available attach to it
            fi
        fi
    fi
}

## Start 9h of rain sleep sounds
rain() {
    local path="$HOME/Music"
    local track="rain.mp3"
    local opts="--no-video"
    local mpv="/usr/bin/mpv"

    nohup "$mpv" "$opts" "$path"/"$track" >/dev/null 2>&1 &
    echo "$!" > /tmp/rain.$!
}

## Add, commit, push functions and aliases
gitrc() {
    REPO="${HOME}/gits/bashrc_stuff"
    
    [[ $(pwd) != "$REPO" ]] && pushd "$REPO" >/dev/null 2>&1
       
    #!!! TODO: check for non-committed changes,
    #          stash them with a message, then
    #          pull and apply stashed after

    [[ "$(git stash)" = "No local changes to save" ]] && git stash >/dev/null 2>&1
    git pull >/dev/null 2>&1
    [[ "$(git stash list)" != '' ]] && git stash apply --index >/dev/null 2>&1
    git add -A >/dev/null 2>&1
    git commit -m "auto commited on: $(date -u '+%F %T') [UTC]" >/dev/null 2>&1
    git push origin master
    git stash drop stash@{0} >/dev/null 2>&1

    popd >/dev/null 2>&1

    . ${HOME}/.bashrc
}

## mpw helper function
mpw() {
    _copy() {
        _clips=('pbcopy' 'xclip' 'gpaste-client')
        _use="${_clips[2]}"

        case "$_use" in
            "${_clips[0]}")
                hash "$_use" 2>/dev/null && "$_use" ;;
            "${_clips[1]}")
                hash "$_use" 2>/dev/null && "$_use" ;;
            "${_clips[2]}")
                hash "$_use" 2>/dev/null && "$_use" add-password "" ;;
            *)
                cat; echo 2>/dev/null
                return
        esac

        echo >&2 "Copied!"
    }

    if [[ "$1" = "-h" ]]; then
	# Call the binary directly when passing help flag so we
	# don't get ugly output and double output with pager
	
	${HOME}/bin/mpw -h > /tmp/mpw_help 2>&1
	less /tmp/mpw_help
	rm /tmp/mpw_help
	(exit 0)
    else
	# Empty the clipboard
	:| _copy 2>/dev/null

	# Ask for the user's name and password if not yet known.
	MPW_FULLNAME=${MPW_FULLNAME:-$(ask 'Your Full Name:')}

	# Start Master Password and copy the output.
	printf %s "$(MPW_FULLNAME=$MPW_FULLNAME command mpw "$@")" | _copy

	# For gpaste-client: clear last password after 30 seconds
	if [[ "$_use" = "${_clips[2]}" ]]; then
            ({ _name="$(mktemp -u XXXXXXXXXXXX)";
               gpaste-client rename-password "" "$_name";
               sleep 30;
               gpaste-client delete-password "$_name"; } >/dev/null 2>&1 &)
	fi
    fi
}

kill-chromium() {
    local pids=$(psgrep chromium-browser | grep $1 | awk '{ print $1 }')

    for pid in $pids; do
	kill -HUP "$pid"
    done
}

chrome() {
    base_dir="${HOME}/.config/google-chrome"
    temp_dir="/tmp/google-chrome"
    default_cache_dir="${HOME}/.cache/google-chrome"
    
    ({ if [[ ! -d "$temp_dir" ]]; then
	   mkdir "$temp_dir"
       fi

       cache_dir="$(mktemp -d -p ${temp_dir} $(for i in {0..64}; do printf X; done))"
       
       /usr/bin/google-chrome --fullscreen --disk-cache-dir="$cache_dir" &

       wait $!

       rm -rf ${base_dir}/Local\ State

       FILES=( 'History' 'History-journal' 'History Provider Cache'
	       'Cookies' 'Cookies-journal' 'Current Session' 'Current Tabs'
	       'Top Sites' 'Top Sites-journal' 'Visited Links' 'Web Data'
	       'Web Data-journal' 'Sync Data' 'Local Storage' 'Session Storage'
	       'Storage' 'Last Session' 'Login Data' 'Login Data-journal' )
       
       for FILE in "${FILES[@]}"; do
	   rm -rf ${base_dir}/Default/"$FILE"
       done

       if [[ -d "$default_cache_dir" ]]; then
	   rm -rf "$default_cache_dir"
       fi

       rm -rf "$cache_dir"
       
      } >/dev/null 2>&1 &)
    }

empty() {
    gpaste-client empty && printf "" | gpaste-client
}
