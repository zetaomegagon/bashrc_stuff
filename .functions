#!/bin/bash

## Start tmux on every shell login
tmux-start() {
    if which tmux >/dev/null 2>&1; then
        if [[ -z "$TMUX" ]] ;then
            ID="$( tmux ls | grep -vm1 attached | cut -d: -f1 )" # get the id of a deattached session
            if [[ -z "$ID" ]] ;then # if not available create a new one
                tmux new-session
            else
                tmux attach-session -t "$ID" # if available attach to it
            fi
        fi
    fi
}

## Start 9h of rain sleep sounds
rain() {
    local path="$HOME/Music"
    local track="rain.mp3"
    local opts="--no-video"
    local mpv="/usr/bin/mpv"

    nohup "$mpv" "$opts" "$path"/"$track" >/dev/null 2>&1 &
    echo "$!" > /tmp/rain.$!
}

## Add, commit, push functions and aliases
gitrc() {
    _repo="${HOME}/bashrc_stuff"
    _bin="${HOME}/bin"
    _files=('cpm' '.bashrc' '.aliases' '.functions')

    set -x
    
    pushd "$_repo" >/dev/null 2>&1
    
    for _file in "${_files[@]}"; do
	if [[ -e "${_bin}/$_file" ]]; then
	    cp -L "${_bin}/$_file" "${_repo}/$_file"
	fi

	if [[ -e "${HOME}/$_file" ]]; then
	    cp -L "${HOME}/$_file" "${_repo}/$_file"
	fi

	git add "${_repo}/$_file"
    done

    git commit -m "auto generated message."
    git push origin master
    popd >/dev/null 2>&1

    set +x
}

## mpw helper function
mpw() {
    _copy() {
        _clips=('pbcopy' 'xclip' 'gpaste-client')
        _use="${_clips[2]}"

        case "$_use" in
            "${_clips[0]}")
                hash "$_use" 2>/dev/null && "$_use" ;;
            "${_clips[1]}")
                hash "$_use" 2>/dev/null && "$_use" ;;
            "${_clips[2]}")
                hash "$_use" 2>/dev/null && "$_use" add-password "" ;;
            *)
                cat; echo 2>/dev/null
                return
        esac

        echo >&2 "Copied!"
    }

    # Empty the clipboard
    :| _copy 2>/dev/null

    # Ask for the user's name and password if not yet known.
    MP_FULLNAME=${MP_FULLNAME:-$(ask 'Your Full Name:')}

    # Start Master Password and copy the output.
    printf %s "$(MP_FULLNAME=$MP_FULLNAME command mpw "$@")" | _copy

    # For gpaste-client: clear last password after 10 seconds
    if [[ "$_use" = "${_clips[2]}" ]]; then
        ({ _name="$(basename $(mktemp -u XXXXXXXXXXXX))";
           # Race condition?
           gpaste-client rename-password "" "$_name";
           sleep 30;
           gpaste-client delete-password "$_name"; } >/dev/null 2>&1 &)
    fi

}
export MP_FULLNAME=Elijah\ Thomas\ Beale

## Port open check
port-open() {
    local address="$1"
    local port="$2"
    local aregex="([0-9]{1,3}\.){3}[0-9]{1,3}"
    local pregex="[0-9]{1,5}"

    if [[ "$address" =~ $aregex ]]; then
        if [[ "$port" =~ $pregex ]]; then
            if [[ $(nc -w 5 -z "$address" "$port"; echo $?) = 0 ]]; then
                echo "Port open!"
            else
                echo "Port closed or unreachable..."
            fi
        else
            echo "Please enter a valid port number!"
        fi
    else
        echo "Please enter a valid address!"
    fi
}

## Add new alias
new-alias() {
    echo "$@" >> ~/.aliases
    (gitrc >/dev/null 2>&1 &)
}

## Simple calculator
mcalc() {
    local expr="$*"
    echo "$expr" | bc
}

## Kill a set of chromium processes
## Doesn't work
kill-chromium() {
    pid=$(psgrep chromium-profiles-manager \
	      | grep $1 \
	      | awk '{ print $1 }')

    for _pid in "$pid"; do
	kill -HUP "$_pid"
    done
}

gen-random() {
    local N=$1

    if [[ $N =~ [A-Za-z]*|[\\\!\@\#\$\%\^\&\*\(\)\_\+\|\~\<\>\.\,\[\]\{\}]* ]]; then
       read -d '' usage <<-EOF
	Valid inputs are 129 > N > 2.
	N must be a whole number.
	EOF
       echo "$usage"
       (exit 1)
    fi

    printf $(mktemp -u $(for n in {0..$N}; do printf X; done))
}
